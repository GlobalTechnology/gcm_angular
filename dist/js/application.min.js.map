{"version":3,"sources":["_app.js","controllers/_controllers.js","directives/_directives.js","filters/_filters.js","services/_services.js","controllers/admin/_admin.js","controllers/error/_error.js","controllers/map/_map.js","controllers/measurements/_measurements.js","controllers/preference/_preference.js","controllers/reports/_reports.js","controllers/stories/_stories.js","services/google-analytics/_google-analytics.js","services/measurements/_measurements.js","services/preference/_preference.js","services/settings/_settings.js","services/stories/_stories.js","app.js","controllers/gma-ctrl.js","application.min.js","controllers/join-ministry-ctrl.js","directives/gma-trend-directive.js","directives/image-resizer.js","filters/mcc-filter.js","filters/role-filter.js","controllers/admin/admin-ctrl.js","controllers/error/error-ctrl.js","controllers/map/map-ctrl.js","controllers/measurements/measurement-details-ctrl.js","controllers/measurements/measurements-ctrl.js","controllers/preference/user-preference-ctrl.js","controllers/reports/reports-ctrl.js","controllers/stories/stories-ctrl.js","services/google-analytics/google-analytics-service.js","services/measurements/assignments-service.js","services/measurements/churches-service.js","services/measurements/iso-countries-service.js","services/measurements/language-service.js","services/measurements/measurement-types-service.js","services/measurements/measurements-service.js","services/measurements/ministries-service.js","services/measurements/session-service.js","services/measurements/target-city-service.js","services/measurements/trainings-service.js","services/preference/user-preference-service.js","services/settings/settings-service.js","services/stories/stories-service.js"],"names":["angular","module","run","$rootScope","$route","$location","Session","Settings","GoogleAnalytics","current","isLoaded","init","window","parent","parentHash","location","hash","path","slice","$on","reload","startSession","ticket","config","$routeProvider","$httpProvider","$compileProvider","SettingsProvider","$provide","growlProvider","$rootScopeProvider","setConfig","gma","aHrefSanitizationWhitelist","imgSrcSanitizationWhitelist","interceptors","push","digestTtl","globalPosition","globalTimeToLive","success","error","warning","info","globalDisableCountDown","forEach","routes","route","i","otherwise","redirectTo","when","templateUrl","controller","decorator","$delegate","ngModel","scope","element","attrs","$injector","$interpolate","get","$set","name","invoke","this","$scope","$element","$attrs","form","ngForm","GMACtrl","$filter","$modal","Ministries","Assignments","$log","UserPreference","growl","Languages","gettextCatalog","gettext","flattenMinistries","arr","ministries","ministry","hasOwnProperty","sub_ministries","concat","_","sortBy","m","team_role","uniq","ministry_id","scrollToTop","setTimeout","scrollTo","mobileApps","tabs","langFlagClass","replace","appEnvironment","appName","appVersion","version","event","session","assignments","length","joinMinistry","$watch","oldVal","debug","min_choice","user_preferences","flat_assignments","getFlatMinistry","found_assignment","find","preferred_ministry","contains","deRegister","assignment","isUndefined","pluck","id","mccs","user_mcc","mcc","preferred_mcc","admin_mcc","default_mcc","mccSort","indexOf","undefined","hasRole","role","mccLabels","ds","gcm","llm","slm","value","periods","now","moment","date","clone","subtract","period","prevPeriod","index","nextPeriod","logout","then","api","invalidateSession","allowClose","instance","open","keyboard","backdrop","resolve","getMinistries","$promise","result","data","addTeamMember","username","user","cas_username","savePreference","user_preference","supported_staff","dimensions","DIM","guid","key_guid","e","status","getString","onError","response","code","showUserPreference","size","modelData","copy","locale","oldLocale","intLocale","loadLanguage","fallback","substring","loadRemote","setStrings","split","toLowerCase","setCurrentLanguage","tabFilter","tab","requiredRoles","hide_reports_tab","next","nextRoutePath","foundTab","findWhere","preventDefault","redirectToHomeTab","canAccessCurrentTab","loadLanguages","langList","getLanguages","$inject","JoinMinistryCtrl","$modalInstance","screen","join","close","cancel","dismiss","directive","restrict","require","link","chart","google","visualization","LineChart","$render","draw","$viewValue","width","height","chartArea","$q","dataURItoBlob","dataURI","byteString","atob","ab","ArrayBuffer","ia","Uint8Array","mimeString","charCodeAt","Blob","type","URL","webkitURL","getResizeArea","resizeAreaId","resizeArea","document","getElementById","createElement","style","visibility","body","appendChild","resizeImage","origImage","options","maxHeight","resizeMaxHeight","maxWidth","resizeMaxWidth","quality","resizeQuality","resizeType","canvas","Math","round","ctx","getContext","drawImage","toDataURL","createImage","url","callback","image","Image","onload","src","fileToDataURL","file","deferred","defer","reader","FileReader","target","readAsDataURL","promise","imageModel","ctrl","doResizing","imageResult","dataURL","blob","resized","match","applyScope","$apply","setValidity","val","$setValidity","bind","evt","files","stopPropagation","createObjectURL","filter","all_mccs","selected_mccs","filtered","items","item","AdminCtrl","MeasurementTypes","confirmMemberDrop","team","modalInstance","modalData","member","yes","no","getRoleName","getActualRoleName","draggedMember","confirmTeamDrop","source_team","source","target_team","draggedTeam","found_role","roles","r","text","checkIfDroppingOnChildTeam","sourceTeam","targetTeam","flatTeams","foundAsChild","sendAnalytics","throttle","leading","selectTab","getMinistry","initTeamAndMembers","measurementTypes","getMeasurementTypes","is_custom","lmi_show","perm_link_stub","visible","lmi_hide","initSubTabs","adminTabTemplates","getAdminSubTabTemplates","activePill","currentAdminTab","template","label","checked","ableToChangeParentMinistry","parentToFind","availableMinIds","getMCCValue","createMCCArray","splice","saveDetails","min_code","content_locales","private","where","parent_id","saveDetailsResource","updateMinistry","addNewMeasurement","newMeasurement","add","addMeasurementType","new_measurement","fromJson","toJson","editMeasurement","measurement","isLocaleLoaded","contentLocales","original","supportedLanguages","filterByLangCode","lang","iso_code","save","changeLocale","getMeasurementType","measurement_type_id","localized_name","localize_name","localized_description","localize_description","availableLanguages","updateMeasurementType","allCurrentTeams","activeTeamMembers","team_members","activeTeam","membersLoaded","setActiveTeam","loadMinistryMembers","memberSearch","inheritedLeader","inheritedAdmin","deletedUser","formerMember","checkFormer","checkDeleted","checkLeader","checkAdmin","addNewTeamMember","activeTeamName","newMember","updateUserRole","old_role","userInfo","c","assignment_id","trim","saveAssignment","post_data","key_username","addNewSubMinistry","newMinistry","createMinistry","got_ministry","isDefined","memberDraggableOptions","containment","refreshPositions","cursorAt","bottom","helper","tr","$","closest","first_name","last_name","email","hide","teamDraggableOptions","teamOnStart","ui","draggedType","memberOnStart","teamOnDrop","removeClass","hide_after_drop","teamBeforeDrop","teamOnOver","teamCollapsed","addClass","trigger","teamOnOut","isMemberDraggable","getCurrentUserRole","ErrorCtrl","loginUrl","login","MapCtrl","$compile","Trainings","Churches","ISOCountries","TargetCity","Stories","initialize","map","maps","Map","defaultMapOptions","setOptions","draggableCursor","addListener","bounds","getBounds","ne","getNorthEast","sw","getSouthWest","lat","lng","loadChurches","markers","church","churchWindow","InfoWindow","churchWindowContent","trainingWindow","trainingWindowContent","targetCityWindow","targetCityWindowContent","newChurchWindow","cancelAddNewIcon","newChurchWindowContent","newTrainingWindow","newTrainingContent","newTargetCityWindow","newTargetCityContent","church_lines","icons","MarkerImage","versionUrl","Size","Point","cluster","multiplying","group","targetpoint","training","targetCity","side","display","search","controls","ControlPosition","TOP_RIGHT","TOP_LEFT","autocomplete","places","Autocomplete","bindTo","place","getPlace","geometry","viewport","fitBounds","setCenter","setZoom","load_training_markers","latitude","longitude","zoom","location_zoom","default_map_views","default_map_view","view","LatLng","parseInt","getISOCountries","getCountries","toDelete","trainings","t","iconFilters","setMap","removedObject","marker","MarkerWithLabel","position","title","icon","labelContent","labelAnchor","labelClass","labelInBackground","draggable","setAnimation","Animation","DROP","getContent","setContent","nextSibling","edit_training","editable","parent_ids","getParentMinistryIds","created_by","person_id","isLeaderAdmin","getPosition","updateTraining","sessionToken","onSaveChurch","setDraggable","load_target_city_markers","targetCities","target_city_id","isTargetCitiesVisible","edit_targetCity","updateTargetCity","parentId","ids","confirmModalCtrl","isTargetCityVisible","area_code","ministry_scope","area_codes","new_church","new_training","new_targetCity","edit_church","SetParentMode","churches","training_types","target_point","mult_church","parent_lines","jesus_film","map_scope_filter","targetCitySubStages","stage","center","panControl","zoomControl","zoomControlOptions","LEFT_CENTER","mapTypeControl","mapTypeControlOptions","MapTypeControlStyle","DROPDOWN_MENU","streetViewControl","overviewMapControl","supportsGeoLocation","navigator","geolocation","format","loadTrainings","loadTargetCities","debounce","params","lat_min","lat_max","long_min","long_max","searchTargetCities","show_tree","show_all","getTrainings","getZoom","getChurches","onGetChurches","line","setVisible","show","onAddChurch","church_id","addChurch","newChurch","jf_contrib","addTraining","addTargetCity","createTargetCity","onAddTraining","getCenter","cluster_count","zIndex","BOUNCE","onAddTargetCity","onAddIcon","security","SetParent","new_parentLine","Polyline","geodesic","strokeColor","strokeOpacity","strokeWeight","SymbolPath","FORWARD_OPEN_ARROW","offset","repeat","move_event","setPath","latLng","onkeydown","keyCode","removeListener","RemoveParent","parents","saveChurch","makeMovableIcon","MoveChurch","MoveTraining","MoveTargetCity","updateChurch","DeleteChurch","end_date","endOf","updateTrainingCompletion","l","remove","churchIconToUse","development","jesusFilmSign","toString","p","par","parentLine","coordinates","number","div_","onAdd","div","className","innerHTML","panes","getPanes","overlayMouseTarget","x","y","overlayProjection","getProjection","fromLatLngToDivPixel","left","top","onRemove","parentNode","removeChild","prototype","OverlayView","addTrainingStage","insert","number_completed","newPhase","phase","current_stage","training_id","addTrainingCompletion","onAddTrainingCompletion","editMode","Id","gcm_training_completions","DeleteTraining","deleteTraining","DeleteTargetCity","target_city","deleteTargetCity","deleteTrainingComplete","training_complete","deleteTrainingCompletion","setMyDefaultMapView","setMinistryDefaultView","d","myLocation","getCurrentPosition","coords","addStoryToIcon","imageFile","storiesConfig","iconName","saveStory","story","stories","createStory","form_data","FormData","append","uploadStoryImage","story_id","img","canAddStories","jQuery","MeasurementDetailsCtrl","Measurements","details","spinner","ns","gmaNamespace","perm_link","da","total","local","my_measurements","trend","arrayToDataTable","filterSource","key","measurements","editForm","$dirty","measurement_type_ids","related_entity_id","$modelValue","saveMeasurement","approveSelfAssigned","state","blocked","MeasurementsCtrl","$interval","decideLocaleToLoad","defaultLocale","setMeasurementStates","measurementState","states_from_config","default_measurement_states","currentLanguage","old","newVal","getMeasurements","loadMeasurements","language","hasOther","section","column","saveMeasurements","lmiForm","type_id","input","$valid","$setPristine","editMeasurementDetails","getMeasurement","autoSave","toggleMeasurementState","checkMeasureState","supported_staff_only","leader_only","UserPreferenceCtrl","static_locale","getMappedMCCS","staticLocales","static_locales","extend","changeMCCS","mini","ReportsCtrl","walterMeanAvg","values","sort","a","b","shift","pop","table","Table","dataTable","historical","chartData","DataTable","tableData","rows","addColumn","dates","addRows","row","addRow","tableDataTable","reverse","legend","alignment","orientation","StoriesCtrl","showUploadError","storiesLoaded","feedsLoaded","storiesNav","currentPage","perPage","stories_per_page","feedsNav","feeds_count","storiesParams","self_only","searchStories","loadNewsFeeds","page","per_page","getNewsFeeds","recentNewsFeeds","entries","totalItems","meta","visibleStories","newStory","removeImage","originalParams","created_at","Date","found_story","image_url","equals","viewStory","isSelfOnlyEnabled","editStory","originalStory","updated_at","updateStory","isStoryEditable","GoogleAnalyticsService","googleAnalytics","ga","appId","appInstallerId","host","screenName","category","action","factory","$resource","getAssignment","method","getAssignments","isArray","getChurch","$http","token","st","session_ticket","$broadcast","request","withCredentials","headers","attempts","responseError","refresh","loginResponse","service_ticket","reject","post","put","getTargetCity","getHighest","array","max","getHighestCount","leaders_trained","training_completion","getPreference","flattenMinistry","mapped_mccs","each","customObject","mccLabel","SettingsService","apiUrl","base","appUrl","measurementsApi","$get","environment","mobileapps","Object","keys","namespace","googleanalytics","provider","getStory","formData","Content-Type","transformRequest","identity"],"mappings":"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","file":"application.min.js","sourcesContent":["(function ( angular ) {\r\n\t'use strict';\r\n\tangular.module( 'gma', [\r\n\t\t'ngRoute',\r\n\t\t'ui.bootstrap',\r\n\t\t'ngResource',\r\n\t\t'gma.controllers',\r\n\t\t'gma.directives',\r\n\t\t'gma.filters',\r\n\t\t'gma.services',\r\n\t\t'ngDragDrop',\r\n\t\t'angular-growl',\r\n        'gettext'\r\n\t] );\r\n})( angular );\r\n","(function ( angular ) {\r\n\t'use strict';\r\n\tangular.module( 'gma.controllers', [\r\n\t\t'gma.controllers.admin',\r\n\t\t'gma.controllers.error',\r\n\t\t'gma.controllers.map',\r\n\t\t'gma.controllers.measurements',\r\n\t\t'gma.controllers.reports',\r\n\t\t'gma.controllers.preference',\r\n        'gma.controllers.stories'\r\n\t] );\r\n})( angular );\r\n","(function ( angular ) {\n\t'use strict';\n\tangular.module( 'gma.directives', [] );\n})( angular );\n","(function ( angular ) {\n\t'use strict';\n\tangular.module( 'gma.filters', [] );\n})( angular );\n","(function ( angular ) {\r\n\t'use strict';\r\n\tangular.module( 'gma.services', [\r\n\t\t'gma.services.googleAnalytics',\r\n\t\t'gma.services.measurements',\r\n\t\t'gma.services.settings',\r\n\t\t'gma.services.preference',\r\n\t\t'gma.services.stories'\r\n\t] );\r\n})( angular );\r\n","(function ( angular ) {\r\n\t'use strict';\r\n\tangular.module( 'gma.controllers.admin', ['gettext'] );\r\n})( angular );\r\n","(function ( angular ) {\n\t'use strict';\n\tangular.module( 'gma.controllers.error', [] );\n})( angular );\n","(function ( angular ) {\n\t'use strict';\n\tangular.module( 'gma.controllers.map', [] );\n})( angular );\n","(function ( angular ) {\n\t'use strict';\n\tangular.module( 'gma.controllers.measurements', [] );\n})( angular );\n","(function ( angular ) {\r\n    'use strict';\r\n    angular.module( 'gma.controllers.preference', [] );\r\n})( angular );\r\n","(function ( angular ) {\n\t'use strict';\n\tangular.module( 'gma.controllers.reports', [] );\n})( angular );\n","(function ( angular ) {\r\n    'use strict';\r\n    angular.module( 'gma.controllers.stories', [] );\r\n})( angular );\r\n","(function ( angular ) {\r\n\t'use strict';\r\n\tangular.module( 'gma.services.googleAnalytics', [] );\r\n})( angular );\r\n","(function ( angular ) {\n\t'use strict';\n\tangular.module( 'gma.services.measurements', [] );\n})( angular );\n","(function ( angular ) {\r\n    'use strict';\r\n    angular.module( 'gma.services.preference', [] );\r\n})( angular );\r\n","(function ( angular ) {\n\t'use strict';\n\tangular.module( 'gma.services.settings', ['gettext'] );\n})( angular );\n","(function ( angular ) {\r\n    'use strict';\r\n    angular.module( 'gma.services.stories', [] );\r\n})( angular );\r\n","(function () {\r\n    'use strict';\r\n    angular.module('gma')\r\n        .run(function ($rootScope, $route, $location, Session, Settings, GoogleAnalytics) {\r\n            // Object to hold current values: assignments, assignment, user ...\r\n            $rootScope.current = {\r\n                isLoaded: false\r\n            };\r\n\r\n            // Init Google Analytics\r\n            GoogleAnalytics.init();\r\n\r\n            // Support application inside an iframe, sync parent hash.\r\n            if (typeof window.parent !== 'undefined') {\r\n                var parentHash = window.parent.location.hash;\r\n                if (parentHash) {\r\n                    $location.path(parentHash.slice(1));\r\n                }\r\n\r\n                $rootScope.$on('$locationChangeSuccess', function () {\r\n                    window.parent.location.hash = '#' + $location.path();\r\n                });\r\n            }\r\n\r\n            // Reload the route since ng-view directive is inside a template.\r\n            $route.reload();\r\n\r\n            // Start the session with the API\r\n            //TODO fetch a ticket from refresh to start session\r\n            Session.startSession(Settings.ticket);\r\n        })\r\n        .config(function ($routeProvider, $httpProvider, $compileProvider, SettingsProvider, $provide, growlProvider, $rootScopeProvider) {\r\n            // Initialize Settings from wrapper provided config\r\n            SettingsProvider.setConfig(window.gma.config);\r\n\r\n            // Add itms-services scheme to safe aHref protocols\r\n            $compileProvider.aHrefSanitizationWhitelist(/^\\s*(https?|ftp|mailto|tel|file|itms-services):/);\r\n\r\n            // Define safe protocols for image src for this app\r\n            $compileProvider.imgSrcSanitizationWhitelist(/^\\s*(https?|ftp|file|data|blob):/);\r\n\r\n            // Register Session as an http interceptor\r\n            $httpProvider.interceptors.push('Session');\r\n\r\n            //increase digest cycle limit , default is 10\r\n            $rootScopeProvider.digestTtl(100);\r\n\r\n            //global configs for angular-growl\r\n            growlProvider.globalPosition('top-right');\r\n            growlProvider.globalTimeToLive({success: 5000, error: 10000, warning: 10000, info: 5000});\r\n            growlProvider.globalDisableCountDown(true);\r\n\r\n            // Setup application routes\r\n            angular.forEach(SettingsProvider.routes(), function (route, i) {\r\n                if (i === 0) {\r\n                    $routeProvider.otherwise({redirectTo: route.path});\r\n                }\r\n                $routeProvider\r\n                    .when(route.path, {\r\n                        templateUrl: route.templateUrl,\r\n                        controller: route.controller\r\n                    });\r\n            });\r\n            $routeProvider.when('/error/:reason', {\r\n                templateUrl: 'partials/error/error.html',\r\n                controller: 'ErrorCtrl'\r\n            });\r\n\r\n            // https://github.com/angular/angular.js/issues/1404\r\n            // Source: http://plnkr.co/edit/hSMzWC?p=preview\r\n            $provide.decorator('ngModelDirective', function ($delegate) {\r\n                var ngModel = $delegate[0], controller = ngModel.controller;\r\n                ngModel.controller = ['$scope', '$element', '$attrs', '$injector', function (scope, element, attrs, $injector) {\r\n                    var $interpolate = $injector.get('$interpolate');\r\n                    attrs.$set('name', $interpolate(attrs.name || '')(scope));\r\n                    $injector.invoke(controller, this, {\r\n                        '$scope': scope,\r\n                        '$element': element,\r\n                        '$attrs': attrs\r\n                    });\r\n                }];\r\n                return $delegate;\r\n            });\r\n\r\n            $provide.decorator('formDirective', function ($delegate) {\r\n                var form = $delegate[0], controller = form.controller;\r\n                form.controller = ['$scope', '$element', '$attrs', '$injector', function (scope, element, attrs, $injector) {\r\n                    var $interpolate = $injector.get('$interpolate');\r\n                    attrs.$set('name', $interpolate(attrs.name || attrs.ngForm || '')(scope));\r\n                    $injector.invoke(controller, this, {\r\n                        '$scope': scope,\r\n                        '$element': element,\r\n                        '$attrs': attrs\r\n                    });\r\n                }];\r\n                return $delegate;\r\n            });\r\n        });\r\n})();\r\n","(function ( angular ) {\r\n\t'use strict';\r\n\r\n\tfunction GMACtrl( $scope, $filter, $location, $modal, Session, Ministries, Assignments, Settings, $log, GoogleAnalytics, UserPreference, growl, Languages, gettextCatalog, gettext ) {\r\n\t\t// Attach $location provider to scope, this is used to set active tabs\r\n\t\t$scope.$location = $location;\r\n\t\t$scope.mobileApps = Settings.mobileApps;\r\n\t\t$scope.tabs = Settings.tabs;\r\n\t\t$scope.langFlagClass = 'flag-us'; //used to show language flag indicator\r\n\t\t// always redirect user to map tab when init\r\n\t\t$location.path( '/map' ).replace();\r\n\r\n\t\t$scope.appEnvironment = Settings.appEnvironment;\r\n\t\t$scope.appName = Settings.name;\r\n\t\t$scope.appVersion = Settings.version;\r\n\t\t//---------------------------------------\r\n\t\t// Assignments\r\n\t\t//---------------------------------------\r\n\r\n\t\t$scope.$on( 'sessionStart', function ( event, session ) {\r\n\t\t\tif ( typeof session.assignments === 'undefined' || session.assignments.length == 0 ) {\r\n\t\t\t\t//Open Modal if user has no assignment\r\n\t\t\t\t$scope.joinMinistry( false );\r\n\t\t\t}\r\n\t\t} );\r\n\r\n\t\t// Update current assignment when assignments is set - this occurs after a session is established\r\n\t\t$scope.$watch( 'current.assignments', function ( assignments, oldVal ) {\r\n\t\t\tif ( assignments === oldVal ) return;\r\n\r\n\t\t\t$log.debug( 'Assignments Changed' );\r\n\r\n\t\t\t//first time when page loads\r\n\t\t\tif ( typeof assignments === 'object' && typeof oldVal === 'undefined' ) {\r\n\t\t\t\tvar min_choice = false;\r\n\t\t\t\tif ( $scope.current.hasOwnProperty( 'user_preferences' ) && typeof $scope.current.user_preferences !== 'undefined' ) {\r\n\t\t\t\t\tvar flat_assignments = UserPreference.getFlatMinistry( assignments );\r\n\t\t\t\t\t//apply user preference\r\n\t\t\t\t\tvar found_assignment = _.find( flat_assignments, function ( ministry ) {\r\n\t\t\t\t\t\treturn (ministry.ministry_id === $scope.current.user_preferences.preferred_ministry);\r\n\t\t\t\t\t} );\r\n\r\n\t\t\t\t\tif ( typeof found_assignment !== 'undefined' && typeof found_assignment !== '' ) {\r\n\t\t\t\t\t\tmin_choice = found_assignment;\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tmin_choice = $filter( 'orderBy' )( assignments, 'name' )[0];\r\n\r\n\t\t\t\t\t}\r\n\t\t\t\t} else {\r\n\t\t\t\t\t//load first ministry if user preferences not found\r\n\t\t\t\t\tmin_choice = $filter( 'orderBy' )( assignments, 'name' )[0];\r\n\r\n\t\t\t\t}\r\n\t\t\t\t//redirect user to his home tab\r\n\t\t\t\tif ( min_choice !== false ) {\r\n\t\t\t\t\tif ( _.contains( ['admin', 'inherited_admin', 'leader', 'inherited_leader', 'member'], min_choice.team_role ) ) {\r\n\t\t\t\t\t\t$location.path( '/news' ).replace();\r\n\t\t\t\t\t\tvar deRegister = $scope.$on( '$routeChangeSuccess', function () {\r\n\t\t\t\t\t\t\tif ( min_choice === false ) return;\r\n\t\t\t\t\t\t\t$scope.current.assignment = min_choice;\r\n\t\t\t\t\t\t\tmin_choice = false;\r\n\t\t\t\t\t\t\tdeRegister();\r\n\t\t\t\t\t\t} );\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\t$scope.current.assignment = min_choice;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\t$scope.current.ministries = flattenMinistries( assignments );\r\n\r\n\t\t\t} else if ( typeof assignments === 'object' ) {\r\n\t\t\t\tif ( angular.isUndefined( $scope.current.assignment ) || !_.contains( _.pluck( assignments, 'id' ), $scope.current.assignment.id ) ) {\r\n\r\n\t\t\t\t\t$scope.current.assignment = $filter( 'orderBy' )( assignments, 'name' )[0];\r\n\r\n\t\t\t\t}\r\n\t\t\t\t$scope.current.ministries = flattenMinistries( assignments );\r\n\t\t\t} else {\r\n\t\t\t\tdelete $scope.current.assignment;\r\n\t\t\t\t$scope.current.ministries = [];\r\n\t\t\t}\r\n\r\n\t\t} );\r\n\r\n\t\t// Update assignment and mcc when assignment changes\r\n\t\t$scope.$watch( 'current.assignment', function ( assignment, oldVal ) {\r\n\t\t\tif ( assignment === oldVal ) return;\r\n\r\n\t\t\t$log.debug( 'Assignment Changed: ' + assignment.name );\r\n\r\n\t\t\tif ( typeof assignment === 'object' ) {\r\n\r\n\t\t\t\tif ( assignment.mccs.length > 0 ) {\r\n\t\t\t\t\t//check if first time\r\n\t\t\t\t\tif ( typeof oldVal === 'undefined' ) {\r\n\t\t\t\t\t\tif ( $scope.current.hasOwnProperty( 'user_preferences' ) && typeof $scope.current.user_preferences !== 'undefined' ) {\r\n\t\t\t\t\t\t\t//apply user preference here\r\n\t\t\t\t\t\t\tvar user_mcc = _.find( assignment.mccs, function ( mcc ) {\r\n\t\t\t\t\t\t\t\treturn (mcc === $scope.current.user_preferences.preferred_mcc);\r\n\t\t\t\t\t\t\t} );\r\n\r\n\t\t\t\t\t\t\tif ( typeof user_mcc !== 'undefined' && typeof user_mcc !== '' ) {\r\n\t\t\t\t\t\t\t\t$scope.current.mcc = user_mcc;\r\n\r\n\t\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\t\t//check for admin preferences\r\n\t\t\t\t\t\t\t\tvar admin_mcc = _.find( assignment.mccs, function ( mcc ) {\r\n\t\t\t\t\t\t\t\t\treturn (mcc === $scope.current.assignment.default_mcc);\r\n\t\t\t\t\t\t\t\t} );\r\n\t\t\t\t\t\t\t\tif ( typeof admin_mcc !== 'undefined' && admin_mcc !== '' ) {\r\n\t\t\t\t\t\t\t\t\t$scope.current.mcc = admin_mcc;\r\n\t\t\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\t\t\t//if admin preferences not found then use fist one\r\n\t\t\t\t\t\t\t\t\t$scope.current.mcc = $filter( 'orderBy' )( assignment.mccs, $scope.mccSort )[0];\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\t// Set mcc if none is currently set or new assignment does not include current mcc\r\n\t\t\t\t\t\t\tif ( typeof $scope.current.mcc === 'undefined' || assignment.mccs.indexOf( $scope.current.mcc ) < 0 ) {\r\n\t\t\t\t\t\t\t\t$scope.current.mcc = $filter( 'orderBy' )( assignment.mccs, $scope.mccSort )[0];\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\t// Set mcc if none is currently set or new assignment does not include current mcc\r\n\t\t\t\t\t\tif ( typeof $scope.current.mcc === 'undefined' || assignment.mccs.indexOf( $scope.current.mcc ) < 0 ) {\r\n\t\t\t\t\t\t\t$scope.current.mcc = $filter( 'orderBy' )( assignment.mccs, $scope.mccSort )[0];\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\t// Delete current mcc if assignment has no mccs\r\n\t\t\t\t\tdelete $scope.current.mcc;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t} );\r\n\r\n\t\t/**\r\n\t\t * Deep watch for mccs array\r\n\t\t */\r\n\t\t$scope.$watch( 'current.assignment.mccs', function ( mccs, oldVal ) {\r\n\t\t\tif ( mccs !== undefined && mccs.length !== 0 ) {\r\n\t\t\t\tif ( typeof $scope.current.mcc === 'undefined' || mccs.indexOf( $scope.current.mcc ) < 0 ) {\r\n\t\t\t\t\t$scope.current.mcc = $filter( 'orderBy' )( mccs, $scope.mccSort )[0];\r\n\t\t\t\t}\r\n\t\t\t} else {\r\n\t\t\t\tdelete $scope.current.mcc;\r\n\t\t\t}\r\n\t\t}, true );\r\n\r\n\t\t$scope.current.hasRole = function ( role ) {\r\n\t\t\tif ( typeof $scope.current.assignment === 'undefined' || typeof $scope.current.assignment.team_role === 'undefined' ) return false;\r\n\t\t\treturn (typeof role === 'string') ? role == $scope.current.assignment.team_role : _.contains( role, $scope.current.assignment.team_role );\r\n\t\t};\r\n\r\n\t\tfunction flattenMinistries( arr ) {\r\n\t\t\tvar ministries = [];\r\n\t\t\tangular.forEach( arr, function ( ministry ) {\r\n\t\t\t\tministries.push( ministry );\r\n\t\t\t\tif ( ministry.hasOwnProperty( 'sub_ministries' ) && typeof ministry.sub_ministries === 'object' ) {\r\n\t\t\t\t\tministries = ministries.concat( flattenMinistries( ministry.sub_ministries ) );\r\n\t\t\t\t}\r\n\t\t\t} );\r\n\r\n\t\t\t//sort by team role\r\n\t\t\tministries = _.sortBy( ministries, function ( m ) {\r\n\t\t\t\treturn (m.team_role === 'leader' ? 0 : 1);\r\n\t\t\t} );\r\n\t\t\t//remove duplicates\r\n\t\t\treturn _.uniq( ministries, false, function ( m ) {\r\n\t\t\t\treturn m.ministry_id;\r\n\t\t\t} );\r\n\t\t}\r\n\r\n\t\t//---------------------------------------\r\n\t\t// Mission Critical Components (MCC)\r\n\t\t//---------------------------------------\r\n\r\n\t\t// MCC labels, this should be done in localization in the future.\r\n\t\t$scope.mccLabels = {\r\n\t\t\t/// MCC - Digital Strategies\r\n\t\t\tds: gettext( 'Digital Strategies' ),\r\n\r\n\t\t\t/// MCC - Global Church Movements\r\n\t\t\tgcm: gettext( 'Global Church Movements' ),\r\n\r\n\t\t\t/// MCC - Leader Led\r\n\t\t\tllm: gettext( 'Leader Led' ),\r\n\r\n\t\t\t/// MCC - Student Led\r\n\t\t\tslm: gettext( 'Student Led' )\r\n\t\t};\r\n\r\n\t\t$scope.mccSort = function ( value ) {\r\n\t\t\treturn $scope.mccLabels[value];\r\n\t\t};\r\n\r\n\t\t//---------------------------------------\r\n\t\t// Periods\r\n\t\t//---------------------------------------\r\n\t\tvar periods = [], now = moment().date( 1 );\r\n\t\tfor ( var i = 0; i < 12; i++ ) {\r\n\t\t\tperiods.push( now.clone() );\r\n\t\t\tnow.subtract( 1, 'M' );\r\n\t\t}\r\n\t\t$scope.periods = periods;\r\n\t\t$scope.current.period = periods[0];\r\n\r\n\t\t$scope.prevPeriod = function () {\r\n\t\t\tvar index = $scope.periods.indexOf( $scope.current.period );\r\n\t\t\tindex = ( ( index + 1 ) >= $scope.periods.length ) ? 0 : index + 1;\r\n\t\t\t$scope.current.period = $scope.periods[index];\r\n\t\t};\r\n\r\n\t\t$scope.nextPeriod = function () {\r\n\t\t\tvar index = $scope.periods.indexOf( $scope.current.period );\r\n\t\t\tindex = ( ( index - 1 ) < 0 ) ? $scope.periods.length - 1 : index - 1;\r\n\t\t\t$scope.current.period = $scope.periods[index];\r\n\t\t};\r\n\r\n\t\t//---------------------------------------\r\n\t\t// Session\r\n\t\t//---------------------------------------\r\n\r\n\t\t$scope.logout = function () {\r\n\t\t\tSession.logout().then( function () {\r\n\t\t\t\twindow.location = Settings.api.logout;\r\n\t\t\t} );\r\n\t\t};\r\n\r\n\t\t$scope.invalidateSession = function () {\r\n\t\t\tSession.logout();\r\n\t\t};\r\n\r\n\t\t$scope.joinMinistry = function ( allowClose ) {\r\n\t\t\tallowClose = typeof allowClose !== 'undefined' ? allowClose : true;\r\n\r\n\t\t\tvar instance = $modal.open( {\r\n\t\t\t\ttemplateUrl: 'partials/join-ministry.html',\r\n\t\t\t\tcontroller:  'JoinMinistryCtrl',\r\n\t\t\t\tkeyboard:    allowClose,\r\n\t\t\t\tbackdrop:    allowClose ? true : 'static',\r\n\t\t\t\tresolve:     {\r\n\t\t\t\t\t'ministries': function () {\r\n\t\t\t\t\t\treturn Ministries.getMinistries().$promise;\r\n\t\t\t\t\t},\r\n\t\t\t\t\t'allowClose': function () {\r\n\t\t\t\t\t\treturn allowClose;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t} );\r\n\r\n\t\t\tinstance.result.then( function ( data ) {\r\n\r\n\t\t\t\tAssignments.addTeamMember( {\r\n\t\t\t\t\tusername:    $scope.current.user.cas_username,\r\n\t\t\t\t\tministry_id: data.ministry.ministry_id,\r\n\t\t\t\t\tteam_role:   'self_assigned'\r\n\t\t\t\t}, function ( assignment ) {\r\n\t\t\t\t\tif ( typeof $scope.current.assignments === 'undefined' || $scope.current.assignments === [] ) {\r\n\t\t\t\t\t\t// If assignments is empty, setting the array will also set the current assignment\r\n\t\t\t\t\t\t$scope.current.assignments = [assignment];\r\n\r\n\t\t\t\t\t\t//Also updating supported staff setting in user preference\r\n\t\t\t\t\t\tUserPreference.savePreference( data.user_preference )\r\n\t\t\t\t\t\t\t.success( function () {\r\n\t\t\t\t\t\t\t\tif ( typeof $scope.current.user_preferences === 'undefined' ) {\r\n\t\t\t\t\t\t\t\t\t$scope.current.user_preferences = {};\r\n\t\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\t\t$scope.current.user_preferences.supported_staff = data.user_preference.supported_staff;\r\n\t\t\t\t\t\t\t} );\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse {\r\n\t\t\t\t\t\t// Add new assignment\r\n\t\t\t\t\t\t$scope.current.assignments.push( assignment );\r\n\r\n\t\t\t\t\t\t// Set new assignment as current\r\n\t\t\t\t\t\t$scope.current.assignment = assignment;\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\t// Google Analytics\r\n\t\t\t\t\tGoogleAnalytics.event( 'assignments', 'join ministry', (function () {\r\n\t\t\t\t\t\tvar dimensions = {};\r\n\t\t\t\t\t\tdimensions[GoogleAnalytics.DIM.guid] = $scope.current.user.key_guid;\r\n\t\t\t\t\t\tdimensions[GoogleAnalytics.DIM.ministry_id] = assignment.ministry_id;\r\n\t\t\t\t\t\treturn dimensions;\r\n\t\t\t\t\t})() );\r\n\t\t\t\t}, function ( e ) {\r\n\t\t\t\t\tif ( e.status === 400 ) {\r\n\t\t\t\t\t\tgrowl.error( gettextCatalog.getString( 'You are already assigned to requested ministry' ) );\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tgrowl.error( gettextCatalog.getString( 'Unable to join to requested ministry' ) );\r\n\t\t\t\t\t}\r\n\t\t\t\t} );\r\n\t\t\t} );\r\n\t\t\tscrollToTop();\r\n\t\t};\r\n\r\n\t\t$scope.onError = function ( response, code ) {\r\n\t\t\t$location.path( '/error' );\r\n\t\t};\r\n\r\n\t\tfunction scrollToTop() {\r\n\t\t\twindow.setTimeout( function () {\r\n\t\t\t\twindow.parent.scrollTo( 0, 0 );\r\n\t\t\t}, 10 );\r\n\t\t}\r\n\r\n\t\t//---------------------------------------\r\n\t\t// User Preferences Dialog\r\n\t\t//---------------------------------------\r\n\r\n\t\t$scope.showUserPreference = function () {\r\n\r\n\t\t\t$modal.open( {\r\n\t\t\t\ttemplateUrl: 'partials/preference/user-preference-modal.html',\r\n\t\t\t\tcontroller:  'UserPreferenceCtrl',\r\n\t\t\t\tkeyboard:    true,\r\n\t\t\t\tbackdrop:    true,\r\n\t\t\t\tsize:        'model-lg',\r\n\t\t\t\tresolve:     {\r\n\t\t\t\t\tmodelData: function () {\r\n\t\t\t\t\t\treturn {\r\n\t\t\t\t\t\t\tmccLabels: angular.copy( $scope.mccLabels )\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t} );\r\n\r\n\t\t\tscrollToTop();\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Watches for changes to static_locale\r\n\t\t * - update gettext language\r\n\t\t * - load external language JSON\r\n\t\t * - update language flag indicator css class\r\n\t\t */\r\n\t\t$scope.$watch( 'current.user_preferences.static_locale', function ( locale, oldLocale ) {\r\n\t\t\tif ( typeof locale === 'undefined' || locale === '' ) return;\r\n\r\n\t\t\tvar intLocale = locale.replace( '-', '_' );\r\n\r\n\t\t\tvar loadLanguage = function ( locale, i ) {\r\n\t\t\t\tvar fallback = i != -1 ? locale.substring( 0, i ) : locale;\r\n\t\t\t\tgettextCatalog.loadRemote( 'languages/' + fallback + '.json' )\r\n\t\t\t\t\t.success( function ( response ) {\r\n\t\t\t\t\t\tgettextCatalog.setStrings( intLocale, response[fallback.replace( '-', '_' )] );\r\n\r\n\t\t\t\t\t\tif ( i != -1 ) {\r\n\t\t\t\t\t\t\tloadLanguage( locale, locale.indexOf( '-', i + 1 ) );\r\n\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\t//set css class to show language flag on top\r\n\t\t\t\t\t\t\t$scope.langFlagClass = 'flag-' + locale.split( '-' )[1].toLowerCase();\r\n\t\t\t\t\t\t\t//set current language, match with json file object name\r\n\t\t\t\t\t\t\tgettextCatalog.setCurrentLanguage( intLocale );\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t} )\r\n\t\t\t\t\t.error( function ( e ) {\r\n\t\t\t\t\t\tif ( i != -1 ) {\r\n\t\t\t\t\t\t\tloadLanguage( locale, locale.indexOf( '-', i + 1 ) );\r\n\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\t//set css class to show language flag on top\r\n\t\t\t\t\t\t\t$scope.langFlagClass = 'flag-' + locale.split( '-' )[1].toLowerCase();\r\n\t\t\t\t\t\t\t//set current language, match with json file object name\r\n\t\t\t\t\t\t\tgettextCatalog.setCurrentLanguage( intLocale );\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t} );\r\n\t\t\t};\r\n\t\t\tloadLanguage( locale, locale.indexOf( '-' ) );\r\n\t\t} );\r\n\r\n\t\t/**\r\n\t\t * Sends true to show, false to hide\r\n\t\t * @param tab\r\n\t\t * @returns {boolean}\r\n\t\t */\r\n\t\t$scope.tabFilter = function ( tab ) {\r\n\t\t\t//current may not be defined, so hide un-till user get an assignment\r\n\t\t\tif ( typeof $scope.current === 'undefined' ) return false;\r\n\t\t\t//check for role first\r\n\t\t\tif ( !$scope.current.hasRole( tab.requiredRoles ) ) {\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\r\n\t\t\tif ( tab.path == '/reports' ) {\r\n\t\t\t\t//user preferences not found\r\n\t\t\t\tif ( typeof $scope.current.user_preferences === 'undefined' ) {\r\n\t\t\t\t\t//send admin preferences\r\n\t\t\t\t\treturn ($scope.current.hide_reports_tab != '1');\r\n\t\t\t\t}\r\n\t\t\t\t//lastly send user preferences\r\n\t\t\t\treturn ($scope.current.user_preferences.hide_reports_tab !== '1');\r\n\t\t\t} else if ( tab.path == '/measurements' ) {\r\n\t\t\t\t//if current ministry has no mcc then hide the tab\r\n\t\t\t\treturn (typeof $scope.current.mcc !== 'undefined');\r\n\t\t\t} else {\r\n\t\t\t\treturn true;\r\n\t\t\t}\r\n\r\n\t\t};\r\n\r\n\t\t$scope.$on( '$locationChangeStart', function ( event, next, current ) {\r\n\t\t\tif ( $scope.current.assignment === undefined ) return true;\r\n\t\t\t//get tab name\r\n\t\t\tvar nextRoutePath = next.split( '#/' )[1];\r\n\t\t\t//get required role for requested tab\r\n\t\t\tvar foundTab = _.findWhere( $scope.tabs, {path: '/' + nextRoutePath} );\r\n\r\n\t\t\t//check if user has permission to load this tab\r\n\t\t\tif ( typeof foundTab !== 'undefined' && !$scope.current.hasRole( foundTab.requiredRoles ) ) {\r\n\t\t\t\tgrowl.error( gettextCatalog.getString( 'You are not authorised for this' ) );\r\n\t\t\t\tevent.preventDefault();\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t} );\r\n\r\n\t\t$scope.current.redirectToHomeTab = function () {\r\n\r\n\t\t\tif ( $scope.current.hasRole( ['admin', 'inherited_admin', 'leader', 'inherited_leader'] ) ) {\r\n\t\t\t\t$location.path( '/news' ).replace();\r\n\t\t\t} else {\r\n\t\t\t\t$location.path( '/map' ).replace();\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t\t$scope.current.canAccessCurrentTab = function () {\r\n\t\t\tif ( typeof $scope.current.assignment === 'undefined' ) {\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\r\n\t\t\treturn ($scope.current.hasRole( _.findWhere( $scope.tabs, {path: $location.path()} ).requiredRoles ));\r\n\r\n\t\t};\r\n\r\n\r\n\t\t$scope.current.loadLanguages = function () {\r\n\r\n\t\t\tif ( typeof $scope.current.langList !== 'undefined' && $scope.current.langList.length !== 0 ) {\r\n\t\t\t\treturn $scope.current.langList;\r\n\t\t\t} else {\r\n\r\n\t\t\t\tLanguages.getLanguages()\r\n\t\t\t\t\t.success( function ( response ) {\r\n\t\t\t\t\t\t$scope.current.langList = _.sortBy( response, 'english_name' );\r\n\t\t\t\t\t\treturn $scope.current.langList;\r\n\t\t\t\t\t} )\r\n\t\t\t\t\t.error( function () {\r\n\t\t\t\t\t\tgrowl.error( gettextCatalog.getString( 'Unable to load languages' ) );\r\n\t\t\t\t\t\treturn false;\r\n\t\t\t\t\t} );\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tangular.module( 'gma.controllers' ).controller( 'GMACtrl', GMACtrl );\r\n})( angular );\r\n",null,"(function () {\r\n    'use strict';\r\n\r\n    function JoinMinistryCtrl($scope, $modalInstance, ministries, allowClose, GoogleAnalytics) {\r\n        $scope.ministries = ministries;\r\n        $scope.allowClose = allowClose;\r\n\r\n        // Google Analytics\r\n        GoogleAnalytics.screen('Join Ministry', (function () {\r\n            var dimensions = {};\r\n            dimensions[GoogleAnalytics.DIM.guid] = $scope.current.user.key_guid;\r\n            return dimensions;\r\n        })());\r\n\r\n        window.setTimeout(function () {\r\n            window.parent.scrollTo(0, 0);\r\n        }, 10);\r\n\r\n        $scope.join = function () {\r\n            var data = {};\r\n            data.ministry = $scope.ministry;\r\n            data.user_preference = $scope.user_preference;\r\n            $modalInstance.close(data);\r\n        };\r\n\r\n        $scope.cancel = function () {\r\n            $modalInstance.dismiss('cancel');\r\n        };\r\n    }\r\n\r\n    angular.module('gma.controllers').controller('JoinMinistryCtrl', JoinMinistryCtrl);\r\n})();\r\n","(function () {\n\t'use strict';\n\n\tangular.module( 'gma.directives' )\n\t\t.directive( 'gmaTrend', [function () {\n\t\t\treturn {\n\t\t\t\trestrict: 'A',\n\t\t\t\trequire:  'ngModel',\n\t\t\t\tlink:     function ( $scope, $element, $attrs, ngModel ) {\n\t\t\t\t\tif ( !ngModel ) return;\n\t\t\t\t\tvar chart = new google.visualization.LineChart( $element.get( 0 ) );\n\n\t\t\t\t\tngModel.$render = function () {\n\t\t\t\t\t\tchart.draw( ngModel.$viewValue, {width: 550, height: 200, chartArea: {width: '65%'}} );\n\t\t\t\t\t};\n\n\t\t\t\t\t$scope.$on( '$destroy', function () {\n\t\t\t\t\t\tchart = null;\n\t\t\t\t\t} );\n\t\t\t\t}\n\t\t\t}\n\t\t}] )\n})();\n","/*\r\n * @source https://github.com/Mischi/angularjs-imageupload-directive\r\n * Made some changes\r\n */\r\n(function (angular) {\r\n    angular.module('gma.directives')\r\n        .directive('imageResizer', function ($q) {\r\n            'use strict';\r\n\r\n            var URL = window.URL || window.webkitURL;\r\n\r\n            /**\r\n             * http://stackoverflow.com/questions/4998908/convert-data-uri-to-file-then-append-to-formdata/5100158\r\n             */\r\n            function dataURItoBlob(dataURI) {\r\n                var byteString = atob(dataURI.split(',')[1]);\r\n                var ab = new ArrayBuffer(byteString.length);\r\n                var ia = new Uint8Array(ab);\r\n                // separate out the mime component\r\n                var mimeString = dataURI.split(',')[0].split(':')[1].split(';')[0];\r\n                for (var i = 0; i < byteString.length; i++) {\r\n                    ia[i] = byteString.charCodeAt(i);\r\n                }\r\n                return new Blob([ab], {type: mimeString});\r\n            }\r\n\r\n            var getResizeArea = function () {\r\n                var resizeAreaId = 'fileupload-resize-area';\r\n\r\n                var resizeArea = document.getElementById(resizeAreaId);\r\n\r\n                if (!resizeArea) {\r\n                    resizeArea = document.createElement('canvas');\r\n                    resizeArea.id = resizeAreaId;\r\n                    resizeArea.style.visibility = 'hidden';\r\n                    document.body.appendChild(resizeArea);\r\n                }\r\n\r\n                return resizeArea;\r\n            };\r\n\r\n            var resizeImage = function (origImage, options) {\r\n\r\n                var maxHeight = options.resizeMaxHeight || 128;\r\n                var maxWidth = options.resizeMaxWidth || 128;\r\n                var quality = options.resizeQuality || 0.8;\r\n                var type = options.resizeType || 'image/jpg';\r\n\r\n                var canvas = getResizeArea();\r\n\r\n                var height = origImage.height;\r\n                var width = origImage.width;\r\n\r\n                // calculate the width and height, constraining the proportions\r\n                if (width > height) {\r\n                    if (width > maxWidth) {\r\n                        height = Math.round(height *= maxWidth / width);\r\n                        width = maxWidth;\r\n                    }\r\n                } else {\r\n                    if (height > maxHeight) {\r\n                        width = Math.round(width *= maxHeight / height);\r\n                        height = maxHeight;\r\n                    }\r\n                }\r\n\r\n                canvas.width = width;\r\n                canvas.height = height;\r\n\r\n                //draw image on canvas\r\n                var ctx = canvas.getContext(\"2d\");\r\n                ctx.drawImage(origImage, 0, 0, width, height);\r\n\r\n                // get the data from canvas as 80% jpg (or specified type).\r\n                return canvas.toDataURL(type, quality);\r\n            };\r\n\r\n            var createImage = function (url, callback) {\r\n                var image = new Image();\r\n                image.onload = function () {\r\n                    callback(image);\r\n                };\r\n                image.src = url;\r\n            };\r\n\r\n            var fileToDataURL = function (file) {\r\n                var deferred = $q.defer();\r\n                var reader = new FileReader();\r\n                reader.onload = function (e) {\r\n                    deferred.resolve(e.target.result);\r\n                };\r\n                reader.readAsDataURL(file);\r\n                return deferred.promise;\r\n            };\r\n\r\n\r\n            return {\r\n                restrict: 'A',\r\n                require: 'ngModel',\r\n                scope: {\r\n                    imageModel: '=',\r\n                    resizeMaxHeight: '@?',\r\n                    resizeMaxWidth: '@?',\r\n                    resizeQuality: '@?',\r\n                    resizeType: '@?'\r\n                },\r\n                link: function (scope, element, attrs, ctrl) {\r\n\r\n                    var doResizing = function (imageResult, callback) {\r\n                        createImage(imageResult.url, function (image) {\r\n                            var dataURL = resizeImage(image, scope);\r\n                            var blob = dataURItoBlob(dataURL);\r\n                            imageResult.resized = {\r\n                                blob: blob, //added blob data also\r\n                                dataURL: dataURL,\r\n                                type: dataURL.match(/:(.+\\/.+);/)[1]\r\n                            };\r\n                            callback(imageResult);\r\n                        });\r\n                    };\r\n\r\n                    var applyScope = function (imageResult) {\r\n                        scope.$apply(function () {\r\n                            //do not support multiple image select\r\n                            scope.imageModel = imageResult;\r\n                        });\r\n                    };\r\n                    var setValidity = function (val) {\r\n                        scope.$apply(function () {\r\n                            ctrl.$setValidity('invalidImage', val);\r\n                        });\r\n                    };\r\n\r\n\r\n                    element.bind('change', function (evt) {\r\n                        //we do not support for multiple image select\r\n                        var files = evt.target.files;\r\n                        //additional check, be fail safe\r\n                        if (files.length === 0) {\r\n                            applyScope({});//empty scope\r\n                            evt.preventDefault();\r\n                            evt.stopPropagation();\r\n                            return false;\r\n                        }\r\n                        //check for file extension\r\n                        if (files[0].type.match('image/*') === null) {\r\n                            angular.element(evt.target).val(''); //empty file input\r\n                            applyScope({});//empty scope\r\n                            setValidity(false); //invalidate input\r\n                            evt.preventDefault();\r\n                            return false;\r\n                        }\r\n                        //validate input\r\n                        setValidity(true);\r\n                        //create a result object to store file info\r\n                        var imageResult = {\r\n                            file: files[0], //original file\r\n                            //Next attribute is required, don't try to remove it\r\n                            url: URL.createObjectURL(files[0])\r\n                        };\r\n                        //convert to base 64\r\n                        fileToDataURL(files[0]).then(function (dataURL) {\r\n                            imageResult.dataURL = dataURL;\r\n                        });\r\n\r\n                        if (scope.resizeMaxHeight || scope.resizeMaxWidth) {\r\n                            //resize image\r\n                            doResizing(imageResult, function (imageResult) {\r\n                                applyScope(imageResult);\r\n                            });\r\n                        }\r\n                        else {\r\n                            //no resizing\r\n                            applyScope(imageResult);\r\n                        }\r\n\r\n                    });\r\n                }\r\n            };\r\n        });\r\n})(angular);","(function () {\r\n    'use strict';\r\n\r\n    angular.module('gma.filters')\r\n        .filter('mccFilter', [function () {\r\n            return function (all_mccs, selected_mccs) {\r\n\r\n                var filtered = [];\r\n\r\n                if(typeof selected_mccs === 'undefined' || typeof all_mccs === 'undefined') return filtered;\r\n\r\n                angular.forEach(all_mccs, function (mcc) {\r\n                    if (selected_mccs.indexOf(mcc.value) !== -1) {\r\n                        filtered.push(mcc);\r\n                    }\r\n                });\r\n\r\n                return filtered;\r\n            };\r\n        }]);\r\n})();\r\n","(function () {\n\t'use strict';\n\n\tangular.module( 'gma.filters' )\n\t\t.filter( 'roleFilter', [function () {\n\t\t\treturn function ( items, role ) {\n\t\t\t\tvar filtered = [];\n\t\t\t\tangular.forEach( items, function ( item ) {\n\t\t\t\t\tif ( typeof role === 'string' && role == item.team_role ) {\n\t\t\t\t\t\tfiltered.push( item );\n\t\t\t\t\t} else if ( typeof role === 'object' && _.contains( role, item.team_role ) ) {\n\t\t\t\t\t\tfiltered.push( item );\n\t\t\t\t\t}\n\t\t\t\t} );\n\t\t\t\treturn filtered;\n\t\t\t};\n\t\t}] );\n})();\n","(function () {\r\n    'use strict';\r\n\r\n    function AdminCtrl($scope, $filter, $modal, Assignments, MeasurementTypes, GoogleAnalytics, Ministries, growl, UserPreference, gettextCatalog, gettext) {\r\n        $scope.current.isLoaded = false;\r\n\r\n        var sendAnalytics = _.throttle(function () {\r\n            GoogleAnalytics.screen('Admin', (function () {\r\n                var dimensions = {};\r\n                dimensions[GoogleAnalytics.DIM.guid] = $scope.current.user.key_guid;\r\n                dimensions[GoogleAnalytics.DIM.ministry_id] = $scope.current.assignment.ministry_id;\r\n                return dimensions;\r\n            })());\r\n        }, 1000, {leading: false});\r\n\r\n        $scope.$watch('current.assignment.ministry_id', function (ministry_id) {\r\n            if (typeof ministry_id === 'undefined') return;\r\n            if ($scope.current.canAccessCurrentTab()) {\r\n                //move user to first sub-tab if he is a leader\r\n                if (!$scope.current.hasRole(['admin', 'inherited_admin'])) {\r\n                    $scope.selectTab('team-members');\r\n                }\r\n\r\n                sendAnalytics();\r\n                $scope.current.isLoaded = false;\r\n                $scope.ministry = Ministries.getMinistry({ministry_id: ministry_id}, function () {\r\n                    $scope.current.isLoaded = true;\r\n                    //refresh the teams and team member view\r\n                    $scope.initTeamAndMembers();\r\n                    //load next data only if has permissions\r\n                    if ($scope.current.hasRole(['admin', 'inherited_admin'])) {\r\n                        //refresh the manage measurement view\r\n                        $scope.measurementTypes = [];\r\n                        $scope.current.loadLanguages();\r\n                        MeasurementTypes.getMeasurementTypes({ministry_id: ministry_id}).$promise.then(function (data) {\r\n                            angular.forEach(data, function (type) {\r\n                                if (type.is_custom && _.contains($scope.ministry.lmi_show, type.perm_link_stub)) {\r\n                                    type.visible = true;\r\n                                } else if (!type.is_custom && !_.contains($scope.ministry.lmi_hide, type.perm_link_stub)) {\r\n                                    type.visible = true;\r\n                                } else {\r\n                                    type.visible = false;\r\n                                }\r\n                                $scope.measurementTypes.push(type);\r\n                            });\r\n                        });\r\n                    }\r\n                });\r\n            } else {\r\n                $scope.current.redirectToHomeTab();\r\n            }\r\n        });\r\n\r\n        //function initializes sub-tabs of admin section\r\n        $scope.initSubTabs = function () {\r\n\r\n            //load all tab urls to scope\r\n            $scope.adminTabTemplates = getAdminSubTabTemplates();\r\n\r\n            //this is the default pill\r\n            if (typeof $scope.activePill === 'undefined') {\r\n                $scope.activePill = 'team-members';\r\n            }\r\n            //selecting current view for very first time\r\n            $scope.selectTab($scope.activePill);\r\n        };\r\n\r\n        //function selects current sub-tab for admin section\r\n        $scope.selectTab = function (tab) {\r\n\r\n            $scope.activePill = tab;\r\n\r\n            if (typeof tab === 'undefined') {\r\n                $scope.activePill = 'team-members';\r\n            }\r\n\r\n            //selecting current tab view\r\n            $scope.currentAdminTab = _.find(getAdminSubTabTemplates(), function (template) {\r\n                return (template.name === tab);\r\n            });\r\n        };\r\n\r\n        var getAdminSubTabTemplates = function () {\r\n\r\n            return [\r\n                {\r\n                    url: 'partials/admin/_team-members.html',\r\n                    name: 'team-members',\r\n                    label: gettext('Team & Members'),\r\n                    requiredRoles: ['admin', 'inherited_admin', 'leader', 'inherited_leader']\r\n                },\r\n                {\r\n                    url: 'partials/admin/_edit-ministry.html',\r\n                    name: 'edit-ministry',\r\n                    label: gettext('Edit Ministry'),\r\n                    requiredRoles: ['admin', 'inherited_admin']\r\n                },\r\n                {\r\n                    url: 'partials/admin/_measurement.html',\r\n                    name: 'measurement',\r\n                    label: gettext('Manage Measurements'),\r\n                    requiredRoles: ['admin', 'inherited_admin']\r\n                }\r\n            ];\r\n        };\r\n\r\n        /** functions for edit-ministry and manage measurement tabs */\r\n        $scope.mccs = [\r\n            {value: 'ds', text: 'Digital Strategies', checked: false},\r\n            {value: 'gcm', text: 'Global Church Movements', checked: false},\r\n            {value: 'llm', text: 'Leader Led', checked: false},\r\n            {value: 'slm', text: 'Student Led', checked: false}\r\n        ];\r\n\r\n        $scope.ableToChangeParentMinistry = function (parentToFind) {\r\n            var availableMinIds = _.pluck($filter('roleFilter')($scope.current.ministries, ['admin', 'inherited_admin', 'leader', 'inherited_leader']), 'ministry_id');\r\n            return _.contains(availableMinIds, parentToFind);\r\n        };\r\n\r\n        $scope.getMCCValue = function (mcc) {\r\n            return _.contains($scope.ministry.mccs, mcc);\r\n        };\r\n\r\n        $scope.createMCCArray = function (status, value) {\r\n            if (status) {\r\n                if ($scope.ministry.mccs.indexOf(value) === -1) {\r\n                    $scope.ministry.mccs.push(value);\r\n                }\r\n            } else {\r\n                var index = $scope.ministry.mccs.indexOf(value);\r\n                if (index !== -1) {\r\n                    $scope.ministry.mccs.splice(index, 1);\r\n                }\r\n            }\r\n        };\r\n\r\n        $scope.saveDetails = function () {\r\n            //additional check if admin un-select all mccs then default_mcc should be empty\r\n            if (_.size($scope.mccs) == 0) {\r\n                $scope.ministry.default_mcc = '';\r\n            }\r\n\r\n            var ministry = {\r\n                ministry_id: $scope.ministry.ministry_id,\r\n                min_code: $scope.ministry.min_code,\r\n                name: $scope.ministry.name,\r\n                mccs: $scope.ministry.mccs,\r\n                content_locales: $scope.ministry.content_locales,\r\n                private: $scope.ministry.private,\r\n                hide_reports_tab: $scope.ministry.hide_reports_tab,\r\n                default_mcc: $scope.ministry.default_mcc,\r\n                lmi_hide: _.pluck(_.where($scope.measurementTypes, {\r\n                    is_custom: false,\r\n                    visible: false\r\n                }), 'perm_link_stub'),\r\n                lmi_show: _.pluck(_.where($scope.measurementTypes, {\r\n                    is_custom: true,\r\n                    visible: true\r\n                }), 'perm_link_stub')\r\n            };\r\n            if ($scope.ministry.hasOwnProperty('parent_id') && typeof $scope.ministry.parent_id === \"string\") {\r\n                ministry.parent_id = $scope.ministry.parent_id;\r\n            }\r\n            $scope.saveDetailsResource = Ministries.updateMinistry(ministry,\r\n                function () {\r\n                    //update current scope also\r\n                    $scope.current.assignment.name = angular.copy(ministry.name);\r\n                    $scope.current.assignment.mccs = angular.copy(ministry.mccs);\r\n                    $scope.current.assignment.content_locales = angular.copy(ministry.content_locales);\r\n                    growl.success(gettextCatalog.getString('Changes saved successfully'));\r\n                }, function (response) {\r\n                    growl.error(gettextCatalog.getString('Unable to save changes'));\r\n                });\r\n        };\r\n\r\n        $scope.addNewMeasurement = function () {\r\n            $modal.open({\r\n                templateUrl: 'partials/admin/add-measurement-type.html',\r\n                controller: function ($scope, $modalInstance) {\r\n                    $scope.newMeasurement = {};\r\n                    $scope.close = function () {\r\n                        $modalInstance.dismiss('cancel');\r\n                    };\r\n\r\n                    $scope.add = function () {\r\n                        $modalInstance.close($scope.newMeasurement);\r\n                    };\r\n                }\r\n            }).result.then(function (newMeasurement) {\r\n                    MeasurementTypes.addMeasurementType(newMeasurement, function (response) {\r\n                        growl.success(gettextCatalog.getString('Measurement was created successfully'));\r\n\r\n                        //push new measurement type to current list of measurement\r\n                        var new_measurement = angular.fromJson(angular.toJson(response));\r\n                        new_measurement.visible = false;\r\n                        $scope.measurementTypes.push(new_measurement);\r\n\r\n                    }, function () {\r\n                        growl.error(gettextCatalog.getString('Unable to create measurement'));\r\n                    });\r\n                });\r\n            scrollToTop();\r\n        };\r\n\r\n        $scope.editMeasurement = function (measurement) {\r\n\r\n            $modal.open({\r\n                templateUrl: 'partials/admin/edit-measurement-type.html',\r\n                controller: function ($scope, $modalInstance, modalData) {\r\n                    $scope.measurement = {};\r\n                    $scope.isLocaleLoaded = true;\r\n                    $scope.contentLocales = modalData.contentLocales;\r\n                    $scope.original = modalData.measurement;\r\n                    $scope.measurement.locale = modalData.supportedLanguages[0];\r\n\r\n                    $scope.close = function () {\r\n                        $modalInstance.dismiss('cancel');\r\n                    };\r\n\r\n                    $scope.filterByLangCode = function (lang) {\r\n\r\n                        return (_.contains(modalData.supportedLanguages, lang.iso_code)) ? lang : false;\r\n\r\n                    };\r\n                    $scope.save = function () {\r\n                        $modalInstance.close($scope.measurement);\r\n                    };\r\n\r\n                    $scope.changeLocale = function (locale) {\r\n                        if (locale === undefined || locale === '') return false;\r\n                        $scope.isLocaleLoaded = false;\r\n                        MeasurementTypes.getMeasurementType({\r\n                            measurement_type_id: modalData.measurement.perm_link_stub,\r\n                            ministry_id: modalData.ministry_id,\r\n                            locale: locale\r\n                        }, function (response) {\r\n                            $scope.measurement.localized_name = response.localize_name || response.localized_name;\r\n                            $scope.measurement.localized_description = response.localize_description || response.localized_description;\r\n                            $scope.isLocaleLoaded = true;\r\n                        }, function () {\r\n                            growl.error(gettextCatalog.getString('Unable to get measurement'));\r\n                            $scope.isLocaleLoaded = true;\r\n                        })\r\n                    };\r\n                    $scope.changeLocale($scope.measurement.locale);\r\n                },\r\n                resolve: {\r\n                    'modalData': function () {\r\n                        return {\r\n                            measurement: angular.copy(measurement),\r\n                            ministry_id: $scope.current.assignment.ministry_id,\r\n                            contentLocales: $scope.availableLanguages,\r\n                            supportedLanguages: $scope.ministry.content_locales || {}\r\n                        }\r\n                    }\r\n                }\r\n            }).result.then(function (form) {\r\n                    form.measurement_type_id = measurement.perm_link_stub;\r\n                    form.ministry_id = $scope.current.assignment.ministry_id;\r\n\r\n                    MeasurementTypes.updateMeasurementType(form, function (response) {\r\n                        growl.success(gettextCatalog.getString('Measurement was updated'));\r\n                    }, function () {\r\n                        growl.error(gettextCatalog.getString('Unable to update measurement'));\r\n                    });\r\n\r\n\r\n                });\r\n            scrollToTop();\r\n        };\r\n\r\n        /** functions for team-members tab **/\r\n\r\n        $scope.roles = [\r\n            {value: \"admin\", text: gettext('Admin')},\r\n            {value: \"inherited_admin\", text: gettext('Admin (inherited)')},\r\n            {value: \"leader\", text: gettext('Leader')},\r\n            {value: \"inherited_leader\", text: gettext(\"Leader (inherited)\")},\r\n            {value: \"member\", text: gettext('Member')},\r\n            {value: \"blocked\", text: gettext('Deleted')},\r\n            {value: \"former_member\", text: gettext('Former Member')},\r\n            {value: \"self_assigned\", text: gettext('Self Assigned')}\r\n        ];\r\n\r\n        $scope.initTeamAndMembers = function () {\r\n            $scope.allCurrentTeams = [];\r\n            $scope.allCurrentTeams.push(angular.copy($scope.current.assignment));\r\n\r\n            $scope.activeTeamMembers = {};\r\n            if ($scope.ministry.hasOwnProperty('team_members')) {\r\n                $scope.activeTeamMembers = angular.copy($scope.ministry.team_members);\r\n            }\r\n            //activate first top most team\r\n            $scope.activeTeam = angular.copy($scope.current.assignment);\r\n            $scope.membersLoaded = true;\r\n        };\r\n\r\n        $scope.setActiveTeam = function (team) {\r\n            //prevent ajax request if clicked team is already active\r\n            if ($scope.activeTeam.ministry_id === team.ministry_id) {\r\n                return false;\r\n            }\r\n\r\n            $scope.activeTeam = team;\r\n            //load selected ministry members\r\n            $scope.loadMinistryMembers(team.ministry_id);\r\n\r\n        };\r\n        $scope.loadMinistryMembers = function (ministry_id) {\r\n            $scope.membersLoaded = false;\r\n            //pull down the selected ministry team members, and update scope\r\n            Ministries.getMinistry({ministry_id: ministry_id}, function (response) {\r\n                $scope.activeTeamMembers = response.team_members;\r\n                $scope.membersLoaded = true;\r\n            }, function () {\r\n                growl.error(gettextCatalog.getString('Unable to load team members'));\r\n                $scope.membersLoaded = true;\r\n            });\r\n        };\r\n\r\n        $scope.filter = {\r\n            memberSearch: '',\r\n            inheritedLeader: true,\r\n            inheritedAdmin: true,\r\n            deletedUser: false,\r\n            formerMember: false,\r\n            checkFormer: function (item) {\r\n                return $scope.filter.formerMember ? true : item.team_role != 'former_member';\r\n            },\r\n            checkDeleted: function (item) {\r\n                return $scope.filter.deletedUser ? true : item.team_role != 'blocked';\r\n            },\r\n            checkLeader: function (item) {\r\n                return $scope.filter.inheritedLeader ? true : item.team_role != 'inherited_leader';\r\n            },\r\n            checkAdmin: function (item) {\r\n                return $scope.filter.inheritedAdmin ? true : item.team_role != 'inherited_admin';\r\n            }\r\n\r\n        };\r\n\r\n        $scope.addNewTeamMember = function () {\r\n            $modal.open({\r\n                templateUrl: 'partials/admin/add-team-member.html',\r\n                controller: function ($scope, $modalInstance, modalData) {\r\n                    $scope.roles = modalData.roles;\r\n                    $scope.activeTeamName = modalData.activeTeam;\r\n\r\n                    $scope.close = function () {\r\n                        $modalInstance.dismiss();\r\n                    };\r\n\r\n                    $scope.add = function () {\r\n                        $modalInstance.close($scope.newMember);\r\n                    };\r\n                },\r\n                resolve: {\r\n                    'modalData': function () {\r\n                        return {\r\n                            roles: $scope.roles,\r\n                            activeTeam: $scope.activeTeam.name\r\n                        }\r\n                    }\r\n                }\r\n            }).result.then(function (newMember) {\r\n                    if (typeof newMember === 'undefined') return false;\r\n                    newMember.ministry_id = $scope.activeTeam.ministry_id;\r\n                    Assignments.addTeamMember(newMember, function (response) {\r\n                        growl.success(gettextCatalog.getString('New member was added successfully'));\r\n                        //refresh members list\r\n                        //todo append new member to current member list instead of refreshing team list\r\n                        $scope.loadMinistryMembers($scope.activeTeam.ministry_id);\r\n\r\n                    }, function (response) {\r\n                        if (response.status === 404) {\r\n                            growl.error(gettextCatalog.getString('Failed, User not found'));\r\n                        } else {\r\n                            growl.error(gettextCatalog.getString('Unable to add new member'));\r\n                        }\r\n                    });\r\n                });\r\n            scrollToTop();\r\n        };\r\n\r\n        $scope.updateUserRole = function (old_role, user) {\r\n\r\n            if (old_role === user.team_role) {\r\n                return false;\r\n            }\r\n\r\n            $modal.open({\r\n                templateUrl: 'partials/admin/confirm-update-role.html',\r\n                controller: function ($scope, $modalInstance, userInfo) {\r\n                    $scope.userInfo = userInfo;\r\n\r\n                    $scope.no = function () {\r\n                        $modalInstance.dismiss();\r\n                    };\r\n\r\n                    $scope.yes = function () {\r\n                        $modalInstance.close(true);\r\n                    };\r\n                    $scope.getRoleName = function (role) {\r\n                        return getActualRoleName(role);\r\n                    }\r\n                },\r\n                resolve: {\r\n                    'userInfo': function () {\r\n                        return {\r\n                            old_role: angular.copy(old_role),\r\n                            user: angular.copy(user)\r\n                        };\r\n                    }\r\n                }\r\n            }).result.then(function (c) {\r\n                    //check if user has a real assignment\r\n                    if (typeof user.assignment_id !== 'undefined' && user.assignment_id.trim() !== '') {\r\n                        //update user role\r\n                        Assignments.saveAssignment({assignment_id: user.assignment_id}, {team_role: user.team_role}, function () {\r\n                            growl.success(gettextCatalog.getString('User role was updated'));\r\n                            //success so update old_role in scope also\r\n                            old_role = user.team_role;\r\n\r\n                        }, function () {\r\n                            growl.error(gettextCatalog.getString('Unable to update user role'));\r\n                            //if failed lets restore old role\r\n                            user.team_role = old_role;\r\n                        });\r\n                    } else {\r\n                        //if user does not hav a real assignment it should a new Assignment call\r\n                        var post_data = {\r\n                            ministry_id: $scope.activeTeam.ministry_id,\r\n                            key_guid: user.key_guid || '',\r\n                            username: user.key_username || '',\r\n                            team_role: user.team_role\r\n                        };\r\n                        Assignments.addTeamMember(post_data, function (response) {\r\n                            growl.success(gettextCatalog.getString('User role was updated'));\r\n                            //refresh members list\r\n                            //todo update user_role and assignment_id in scope instead of refreshing list\r\n                            $scope.loadMinistryMembers($scope.activeTeam.ministry_id);\r\n\r\n                        }, function () {\r\n                            growl.error(gettextCatalog.getString('Unable to update user role'));\r\n                            //if failed lets restore old role\r\n                            user.team_role = old_role;\r\n\r\n                        });\r\n                    }\r\n\r\n                }, function () {\r\n                    //restore user role upon cancel\r\n                    user.team_role = old_role;\r\n                });\r\n\r\n            scrollToTop();\r\n\r\n        };\r\n\r\n        $scope.addNewSubMinistry = function () {\r\n            $modal.open({\r\n                templateUrl: 'partials/admin/add-sub-ministry.html',\r\n                controller: function ($scope, $modalInstance, modalData) {\r\n                    $scope.newMinistry = {};\r\n                    $scope.activeTeamName = modalData.activeTeam;\r\n                    $scope.close = function () {\r\n                        $modalInstance.dismiss();\r\n                    };\r\n\r\n                    $scope.add = function () {\r\n                        $modalInstance.close($scope.newMinistry);\r\n                    };\r\n                },\r\n                resolve: {\r\n                    'modalData': function () {\r\n                        return {\r\n                            activeTeam: $scope.activeTeam.name\r\n                        };\r\n                    }\r\n                }\r\n            }).result.then(function (newMinistry) {\r\n                    if (typeof newMinistry === 'undefined') return false;\r\n\r\n                    newMinistry.parent_id = $scope.activeTeam.ministry_id;\r\n\r\n                    Ministries.createMinistry(newMinistry, function (response) {\r\n                        growl.success(gettextCatalog.getString('Sub ministry was created successfully'));\r\n\r\n                        var got_ministry = {\r\n                            ministry_id: response.id,\r\n                            name: response.name,\r\n                            min_code: response.min_code,\r\n                            parent_id: response.parent_id\r\n                        };\r\n                        //append newly created ministry to current select team\r\n                        if (angular.isDefined($scope.activeTeam.sub_ministries)) {\r\n                            $scope.activeTeam.sub_ministries.push(got_ministry);\r\n                        } else {\r\n                            $scope.activeTeam.sub_ministries = [got_ministry];\r\n                        }\r\n\r\n                    }, function () {\r\n                        growl.error(gettextCatalog.getString('Unable to add sub ministry'));\r\n                    });\r\n                });\r\n\r\n            scrollToTop();\r\n\r\n        };\r\n\r\n        function scrollToTop() {\r\n            window.setTimeout(function () {\r\n                window.parent.scrollTo(0, 0);\r\n            }, 10);\r\n        }\r\n\r\n        $scope.memberDraggableOptions = {\r\n            containment: \"#team-member-pane\",\r\n            refreshPositions: true,\r\n            cursorAt: {bottom: 0},\r\n            helper: function (event) {\r\n                var tr = $(event.target).closest('tr');\r\n                var first_name = tr.find('td:first').text();\r\n                var last_name = tr.find('td:nth-child(2)').text();\r\n                var email = tr.find('td:nth-child(3)').text();\r\n                var hide = (email === '') ? 'none' : 'hide';\r\n                return $('<tr class=\"drag-member\"><td><i class=\"glyphicon glyphicon-user\"></i></td><td>' + first_name + '</td><td>' + last_name + '</td><td style=\"display:' + hide + '\">' + email + '</td></tr>');\r\n\r\n            }\r\n        };\r\n        $scope.teamDraggableOptions = {\r\n            refreshPositions: true,\r\n            helper: function (event) {\r\n                var team = $(event.target).closest('span').text();\r\n                return $('<span class=\"drag-team\"><i class=\"glyphicon glyphicon-certificate\"></i> ' + team + '</span>');\r\n            }\r\n        };\r\n        $scope.teamOnStart = function (event, ui, team) {\r\n            $scope.draggedType = 'team';\r\n            $scope.draggedTeam = team;\r\n        };\r\n        $scope.memberOnStart = function (event, ui, member) {\r\n            $scope.draggedType = 'member';\r\n            $scope.draggedMember = member;\r\n        };\r\n\r\n        /**\r\n         * Function will be fired when a team/member is dropped on a team\r\n         * @param event\r\n         * @param ui\r\n         * @param team The team on which a team/member is being dropped\r\n         * @returns {boolean}\r\n         */\r\n        $scope.teamOnDrop = function (event, ui, team) {\r\n            $(event.target).removeClass('drag-on-over');\r\n\r\n            //case when moving team\r\n            if ($scope.draggedType === 'team') {\r\n                var draggedTeam = angular.copy($scope.draggedTeam);\r\n                //update ministry parent id\r\n                var ministry = {\r\n                    ministry_id: $scope.draggedTeam.ministry_id,\r\n                    min_code: $scope.draggedTeam.min_code,\r\n                    parent_id: team.ministry_id\r\n                };\r\n                Ministries.updateMinistry(ministry, function (response) {\r\n                    growl.success(gettextCatalog.getString('Ministry was moved successfully'));\r\n                    //append team to new location\r\n                    if (team.hasOwnProperty('sub_ministries')) {\r\n                        team.sub_ministries.push(draggedTeam);\r\n                    } else {\r\n                        team.sub_ministries = [];\r\n                        team.sub_ministries.push(draggedTeam);\r\n                    }\r\n                    //remove team from list\r\n                    if ($scope.draggedTeam.ministry_id === ministry.ministry_id) {\r\n                        $scope.draggedTeam.hide_after_drop = true;\r\n                    }\r\n                }, function () {\r\n                    growl.error(gettextCatalog.getString('Unable to move ministry'));\r\n                });\r\n\r\n                //case when moving member\r\n            } else if ($scope.draggedType === 'member') {\r\n                var member = {\r\n                    assignment_id: $scope.draggedMember.assignment_id,\r\n                    key_guid: $scope.draggedMember.key_guid,\r\n                    username: $scope.draggedMember.key_username,\r\n                    team_role: $scope.draggedMember.team_role,\r\n                    ministry_id: team.ministry_id\r\n                };\r\n\r\n                Assignments.addTeamMember(member, function () {\r\n                    $scope.draggedMember.team_role = 'former_member';\r\n                    growl.success(gettextCatalog.getString('Member was moved to ministry successfully'));\r\n                    //set user's old role to former_member\r\n                    Assignments.saveAssignment({assignment_id: member.assignment_id}, {team_role: 'former_member'}, function () {\r\n                        $scope.draggedMember.team_role = 'former_member';\r\n                    }, function () {\r\n                        //restore upon fail\r\n                        $scope.draggedMember.team_role = member.team_role;\r\n                    });\r\n                }, function () {\r\n                    growl.error(gettextCatalog.getString('Unable to move member'));\r\n                });\r\n            } else {\r\n                return false;\r\n            }\r\n\r\n        };\r\n\r\n        /**\r\n         * Function will be fired just before drop event\r\n         * @param event\r\n         * @param ui\r\n         * @param team Then team on which the object is being dropped\r\n         * @returns {boolean}\r\n         */\r\n        $scope.teamBeforeDrop = function (event, ui, team) {\r\n            $(event.target).removeClass('drag-on-over');\r\n            // detect what type of object is being dropped and show relate popup\r\n            if ($scope.draggedType == 'team') {\r\n                //check if team can be dropped or not\r\n                if (team.ministry_id === $scope.draggedTeam.parent_id) {\r\n                    growl.error(gettextCatalog.getString(\"Drop canceled, can't be dropped on parent team\"));\r\n                    return {\r\n                        then: function () {\r\n                            return false;\r\n                        }\r\n                    };\r\n                } else if (team.parent_id === $scope.draggedTeam.ministry_id) {\r\n                    growl.error(gettextCatalog.getString(\"Drop canceled, can't be dropped on child team\"));\r\n                    return {\r\n                        then: function () {\r\n                            return false;\r\n                        }\r\n                    };\r\n                } else if ($scope.draggedTeam.hasOwnProperty('sub_ministries') && checkIfDroppingOnChildTeam($scope.draggedTeam, team)) {\r\n                    growl.error(gettextCatalog.getString(\"Drop canceled, can't be dropped on child team\"));\r\n                    return {\r\n                        then: function () {\r\n                            return false;\r\n                        }\r\n                    };\r\n                } else {\r\n                    return confirmTeamDrop(team);\r\n                }\r\n\r\n            } else if ($scope.draggedType == 'member') {\r\n                //prevent member drop on current active team itself\r\n                if ($scope.activeTeam.ministry_id === team.ministry_id) {\r\n                    growl.error(gettextCatalog.getString(\"Drop canceled, can't be dropped on selected team\"));\r\n                    return {\r\n                        then: function () {\r\n                            return false;\r\n                        }\r\n                    };\r\n                } else {\r\n                    return confirmMemberDrop(team);\r\n                }\r\n\r\n            } else {\r\n                return false;\r\n            }\r\n\r\n        };\r\n\r\n        function confirmMemberDrop(team) {\r\n            var modalInstance = $modal.open({\r\n                templateUrl: 'partials/admin/confirm-member-drop.html',\r\n                controller: function ($scope, $modalInstance, modalData) {\r\n                    $scope.member = modalData.member;\r\n                    $scope.team = modalData.team;\r\n\r\n                    $scope.yes = function () {\r\n                        $modalInstance.close();\r\n                    };\r\n                    $scope.no = function () {\r\n                        $modalInstance.dismiss('cancel');\r\n                    };\r\n                    $scope.getRoleName = function (role) {\r\n                        return getActualRoleName(role);\r\n                    }\r\n                },\r\n                resolve: {\r\n                    modalData: function () {\r\n                        return {\r\n                            member: $scope.draggedMember,\r\n                            team: team\r\n                        }\r\n                    }\r\n                }\r\n            });\r\n            scrollToTop();\r\n            return modalInstance.result;\r\n\r\n        }\r\n\r\n        function confirmTeamDrop(team) {\r\n            var modalInstance = $modal.open({\r\n                templateUrl: 'partials/admin/confirm-team-drop.html',\r\n                controller: function ($scope, $modalInstance, modalData) {\r\n                    $scope.source_team = modalData.source;\r\n                    $scope.target_team = modalData.target;\r\n\r\n                    $scope.yes = function () {\r\n                        $modalInstance.close();\r\n                    };\r\n                    $scope.no = function () {\r\n                        $modalInstance.dismiss('cancel');\r\n                    };\r\n\r\n                },\r\n                resolve: {\r\n                    modalData: function () {\r\n                        return {\r\n                            source: $scope.draggedTeam.name,\r\n                            target: team.name\r\n                        }\r\n                    }\r\n                }\r\n            });\r\n            scrollToTop();\r\n            return modalInstance.result;\r\n\r\n        }\r\n\r\n        $scope.teamOnOver = function (event, ui, teamCollapsed) {\r\n            $(event.target).addClass('drag-on-over');\r\n            //expand tree if collapsed\r\n            if (teamCollapsed === true) {\r\n                angular.element(event.target).find('i').trigger('click');\r\n            }\r\n        };\r\n\r\n        $scope.teamOnOut = function (event) {\r\n            $(event.target).removeClass('drag-on-over');\r\n        };\r\n\r\n        $scope.isMemberDraggable = function (member) {\r\n            //if member does not have assignment id\r\n            if (typeof member.assignment_id === 'undefined' || member.assignment_id.trim() === '') {\r\n                return false;\r\n            }\r\n            //members who don't have key_guid or key_username are not be movable\r\n            else if (typeof member.key_guid === 'undefined') {\r\n                return false\r\n            } else if (typeof member.key_username === 'undefined') {\r\n                return false;\r\n            } else if (member.key_guid == '') {\r\n                return false;\r\n            } else if (member.key_username == '') {\r\n                return false;\r\n            }\r\n            //members who has these roles are not movable too\r\n            return !_.contains(['inherited_admin', 'inherited_leader', 'blocked', 'former_member'], member.team_role)\r\n        };\r\n\r\n\r\n        $scope.getCurrentUserRole = function (role) {\r\n            return getActualRoleName(role);\r\n        };\r\n\r\n        function getActualRoleName(role) {\r\n            var found_role = _.find($scope.roles, function (r) {\r\n                return r.value === role;\r\n            });\r\n\r\n            if (found_role !== undefined) {\r\n                return found_role.text;\r\n            }\r\n            return role;\r\n        }\r\n\r\n\r\n        function checkIfDroppingOnChildTeam(sourceTeam, targetTeam) {\r\n            var flatTeams = UserPreference.getFlatMinistry(angular.copy(sourceTeam.sub_ministries));\r\n            //check if target is in source team's list\r\n            var foundAsChild = _.find(flatTeams, function (team) {\r\n                return team.ministry_id === targetTeam.ministry_id;\r\n            });\r\n\r\n            return (foundAsChild !== undefined);\r\n        }\r\n\r\n    }\r\n\r\n    angular.module('gma.controllers.admin').controller('AdminCtrl', AdminCtrl);\r\n}());\r\n","(function () {\r\n\t'use strict';\r\n\r\n\tfunction ErrorCtrl( $scope, Settings ) {\r\n\t\t$scope.current.isLoaded = true;\r\n\r\n\t\t$scope.loginUrl = Settings.api.login;\r\n\t}\r\n\r\n\tangular.module( 'gma.controllers.error' ).controller( 'ErrorCtrl', ErrorCtrl );\r\n}());\r\n","(function ($) {\r\n    'use strict';\r\n\r\n    function MapCtrl($scope, $compile, Trainings, Churches, Ministries, Settings, GoogleAnalytics, UserPreference, $modal, growl, ISOCountries, TargetCity, Stories, gettextCatalog) {\r\n        $scope.current.isLoaded = false;\r\n        $scope.versionUrl = Settings.versionUrl;\r\n        $scope.area_codes = _.sortBy(Settings.area_codes, 'name');\r\n\r\n        $scope.new_church = {};\r\n        $scope.new_training = {};\r\n        $scope.new_targetCity = {};\r\n        $scope.edit_church = {};\r\n        //a flag for parent mode\r\n        $scope.SetParentMode = false;\r\n\r\n        $scope.church_lines = [];\r\n        $scope.churches = [];\r\n        $scope.trainings = [];\r\n        $scope.targetCities = [];\r\n        $scope.training_types = [\r\n            {value: \"MC2\", text: 'MC2'},\r\n            {value: \"T4T\", text: 'T4T'},\r\n            {value: \"CPMI\", text: 'CPMI'},\r\n            {value: \"\", text: 'Other'}\r\n        ];\r\n        //for filters/checkbox on sidebar\r\n        $scope.iconFilters = {\r\n            training: true,\r\n            targetCity: true,\r\n            target_point: true,\r\n            group: true,\r\n            church: true,\r\n            mult_church: true,\r\n            parent_lines: true,\r\n            jesus_film: true\r\n        };\r\n        //for radio button filter\r\n        $scope.map_scope_filter = 'min_only';\r\n        //sub-stages for target city\r\n        $scope.targetCitySubStages = [\r\n            {val: '0', name: '0 - Nothing yet', stage: 0},\r\n            {val: '0a', name: '0a - Pioneering', stage: 0},\r\n            {val: '1a', name: '1a - Startup (1-5 Groups)', stage: 1},\r\n            {val: '1b', name: '1b - Solidification (5-10 groups)', stage: 1},\r\n            {val: '2', name: '2 - Growth (> 10 groups)', stage: 2},\r\n            {val: '3', name: '3 - Partnering (>30 groups)', stage: 3}\r\n        ];\r\n\r\n        //default map options\r\n        var defaultMapOptions = {\r\n            zoom: 3,\r\n            center: new google.maps.LatLng(0, 0),\r\n            panControl: true,\r\n            zoomControl: true,\r\n            zoomControlOptions: {\r\n                position: google.maps.ControlPosition.LEFT_CENTER\r\n            },\r\n            mapTypeControl: true,\r\n            mapTypeControlOptions: {\r\n                style: google.maps.MapTypeControlStyle.DROPDOWN_MENU,\r\n                position: google.maps.ControlPosition.TOP_RIGHT\r\n            },\r\n            streetViewControl: false,\r\n            overviewMapControl: false\r\n        };\r\n        $scope.supportsGeoLocation = typeof navigator.geolocation !== 'undefined';\r\n        setTimeout(initialize, 0);\r\n\r\n        var sendAnalytics = _.throttle(function () {\r\n\r\n            GoogleAnalytics.screen('Map', (function () {\r\n                var dimensions = {};\r\n                dimensions[GoogleAnalytics.DIM.guid] = $scope.current.user.key_guid;\r\n                if (angular.isDefined($scope.current.assignment.ministry_id)) {\r\n                    dimensions[GoogleAnalytics.DIM.ministry_id] = $scope.current.assignment.ministry_id;\r\n                }\r\n                if (angular.isDefined($scope.current.mcc)) {\r\n                    dimensions[GoogleAnalytics.DIM.mcc] = $scope.current.mcc;\r\n                }\r\n                if (angular.isDefined($scope.current.period)) {\r\n                    dimensions[GoogleAnalytics.DIM.period] = $scope.current.period.format('YYYY-MM');\r\n                }\r\n                return dimensions;\r\n            })());\r\n        }, 1000, {leading: false});\r\n\r\n        function initialize() {\r\n            //init google map\r\n            $scope.map = new google.maps.Map(document.getElementById('map_canvas'), defaultMapOptions);\r\n            $scope.map.setOptions({draggableCursor: ''});\r\n\r\n            google.maps.event.addListener($scope.map, \"idle\", function () {\r\n                $scope.current.isLoaded = true;\r\n                var bounds = $scope.map.getBounds(),\r\n                    ne = bounds.getNorthEast(),\r\n                    sw = bounds.getSouthWest();\r\n\r\n                if (ne.lat() == sw.lat() && ne.lng() == sw.lng()) {\r\n                    // Trigger a resize if bounds have 0 area\r\n                    google.maps.event.trigger($scope.map, 'resize');\r\n                }\r\n                else {\r\n                    $scope.loadChurches();\r\n                }\r\n            });\r\n            $scope.map.markers = [];\r\n            $scope.church = {name: \"\"};\r\n            //edit church\r\n            $scope.churchWindow = new google.maps.InfoWindow();\r\n            $scope.churchWindowContent = $compile('<div id=\"church_window_content\" ng-include=\"\\'partials/map/edit-church.html\\'\"></div>')($scope)\r\n            $scope.churchWindow.setOptions({maxWidth: 300});\r\n            //edit training\r\n            $scope.trainingWindow = new google.maps.InfoWindow();\r\n            $scope.trainingWindowContent = $compile('<div id=\"training_window_content\" ng-include=\"\\'partials/map/edit-training.html\\'\"></div>')($scope)\r\n            $scope.trainingWindow.setOptions({maxWidth: 400});\r\n            //edit target city\r\n            $scope.targetCityWindow = new google.maps.InfoWindow();\r\n            $scope.targetCityWindowContent = $compile('<div id=\"traget_city_window_content\" ng-include=\"\\'partials/map/edit-target-city.html\\'\"></div>')($scope)\r\n            $scope.targetCityWindow.setOptions({maxWidth: 300});\r\n\r\n            //new church\r\n            $scope.newChurchWindow = new google.maps.InfoWindow();\r\n            google.maps.event.addListener($scope.newChurchWindow, 'closeclick', function () {\r\n                $scope.cancelAddNewIcon();\r\n            });\r\n            $scope.newChurchWindowContent = $compile('<div id=\"new_church_window_content\" ng-include=\"\\'partials/map/new-church.html\\'\"></div>')($scope);\r\n            $scope.newChurchWindow.setOptions({maxWidth: 300});\r\n            //new training\r\n            $scope.newTrainingWindow = new google.maps.InfoWindow();\r\n            google.maps.event.addListener($scope.newTrainingWindow, 'closeclick', function () {\r\n                $scope.cancelAddNewIcon();\r\n            });\r\n            $scope.newTrainingContent = $compile('<div id=\"new_training_window_content\" ng-include=\"\\'partials/map/new-training.html\\'\"></div>')($scope);\r\n            $scope.newTrainingWindow.setOptions({maxWidth: 300});\r\n            //new target city\r\n            $scope.newTargetCityWindow = new google.maps.InfoWindow();\r\n            google.maps.event.addListener($scope.newTargetCityWindow, 'closeclick', function () {\r\n                $scope.cancelAddNewIcon();\r\n            });\r\n            $scope.newTargetCityContent = $compile('<div id=\"new_target_city_window_content\" ng-include=\"\\'partials/map/new-target-city.html\\'\"></div>')($scope);\r\n            $scope.newTargetCityWindow.setOptions({maxWidth: 300});\r\n\r\n\r\n            $scope.map.church_lines = [];\r\n\r\n            $scope.map.icons = {\r\n                church: new google.maps.MarkerImage(\r\n                    Settings.versionUrl('img/icon/church.png'),\r\n                    new google.maps.Size(60, 60),\r\n                    new google.maps.Point(0, 0),\r\n                    new google.maps.Point(30, 58)\r\n                ),\r\n                cluster: new google.maps.MarkerImage(\r\n                    Settings.versionUrl('img/icon/cluster.png'),\r\n                    new google.maps.Size(60, 60),\r\n                    new google.maps.Point(0, 0),\r\n                    new google.maps.Point(30, 31)\r\n                ),\r\n                multiplying: new google.maps.MarkerImage(\r\n                    Settings.versionUrl('img/icon/multiplying.png'),\r\n                    new google.maps.Size(60, 60),\r\n                    new google.maps.Point(0, 0),\r\n                    new google.maps.Point(30, 53)\r\n                ),\r\n                group: new google.maps.MarkerImage(\r\n                    Settings.versionUrl('img/icon/group.png'),\r\n                    new google.maps.Size(60, 60),\r\n                    new google.maps.Point(0, 0),\r\n                    new google.maps.Point(30, 55)\r\n                ),\r\n                targetpoint: new google.maps.MarkerImage(\r\n                    Settings.versionUrl('img/icon/target.png'),\r\n                    new google.maps.Size(60, 60),\r\n                    new google.maps.Point(0, 0),\r\n                    new google.maps.Point(32, 56)\r\n                ),\r\n                training: new google.maps.MarkerImage(\r\n                    Settings.versionUrl('img/icon/training.png'),\r\n                    new google.maps.Size(60, 60),\r\n                    new google.maps.Point(0, 0),\r\n                    new google.maps.Point(30, 43)\r\n                ),\r\n                targetCity: new google.maps.MarkerImage(\r\n                    Settings.versionUrl('img/icon/target-city.png'),\r\n                    new google.maps.Size(60, 60), //size in pixel\r\n                    new google.maps.Point(0, 0), //The origin for this image is 0,0\r\n                    new google.maps.Point(30, 43)  // The anchor for this image\r\n                )\r\n            };\r\n\r\n            //map sidebar and controls\r\n            $scope.map.side = document.getElementById('side');\r\n            $scope.map.side.index = -1;\r\n            $scope.map.side.style.display = 'block';\r\n            $scope.map.search = document.getElementById('map_controls');\r\n            $scope.map.search.index = 3;\r\n            $scope.map.search.style.display = 'block';\r\n\r\n            $scope.map.controls[google.maps.ControlPosition.TOP_RIGHT].push($scope.map.side);\r\n            $scope.map.controls[google.maps.ControlPosition.TOP_LEFT].push($scope.map.search);\r\n            //search box control\r\n            $scope.autocomplete = new google.maps.places.Autocomplete(document.getElementById('searchBox'));\r\n            $scope.autocomplete.bindTo('bounds', $scope.map);\r\n\r\n            google.maps.event.addListener($scope.autocomplete, 'place_changed', function () {\r\n                var place = $scope.autocomplete.getPlace();\r\n                if (!place.geometry) {\r\n                    return;\r\n                }\r\n\r\n                if (place.geometry.viewport) {\r\n                    $scope.map.fitBounds(place.geometry.viewport);\r\n                } else {\r\n                    $scope.map.setCenter(place.geometry.location);\r\n                    $scope.map.setZoom(15);\r\n                }\r\n                //close any newIcon window\r\n                $scope.cancelAddNewIcon();\r\n            });\r\n\r\n            if ($scope.current.assignment) {\r\n                load_training_markers();\r\n            }\r\n\r\n            $scope.$watch('current.assignment', function (assignment, oldVal) {\r\n                if (typeof assignment !== 'undefined') {\r\n                    //set default, be fail safe\r\n                    var latitude, longitude, zoom;\r\n\r\n                    if (assignment && assignment.hasOwnProperty('location')) {\r\n                        latitude = assignment.location.latitude;\r\n                        longitude = assignment.location.longitude;\r\n                    }\r\n                    if (assignment && assignment.hasOwnProperty('location_zoom')) {\r\n                        zoom = assignment.location_zoom;\r\n                    }\r\n\r\n                    //checking if user preference is set\r\n                    if (typeof $scope.current.user_preferences === 'object' && typeof $scope.current.user_preferences.default_map_views === 'object') {\r\n\r\n                        //if user preference has default view\r\n                        var default_map_view = _.find($scope.current.user_preferences.default_map_views, function (view) {\r\n                            return (view.ministry_id === $scope.current.assignment.ministry_id);\r\n                        });\r\n\r\n                        if (typeof default_map_view !== 'undefined') {\r\n                            //overriding default view by user preference\r\n                            latitude = default_map_view.location.latitude;\r\n                            longitude = default_map_view.location.longitude;\r\n                            zoom = default_map_view.location_zoom;\r\n                        }\r\n\r\n                    }\r\n\r\n                    //lastly set map view\r\n                    if (typeof latitude !== 'undefined' && typeof longitude !== 'undefined' && typeof zoom !== 'undefined') {\r\n                        $scope.map.setCenter(new google.maps.LatLng(latitude, longitude));\r\n                        $scope.map.setZoom(parseInt(zoom));\r\n                    }\r\n\r\n                }\r\n            }, true);\r\n        }//end init function\r\n\r\n        //if user changes ministry\r\n        $scope.$watch('current.assignment.ministry_id', function (ministry_id) {\r\n            if (typeof ministry_id === 'undefined') {\r\n                $scope.trainings = [];\r\n            } else {\r\n                sendAnalytics();\r\n                $scope.loadTrainings();\r\n                $scope.isTargetCitiesVisible = isTargetCityVisible();\r\n                $scope.loadTargetCities();\r\n            }\r\n        });\r\n\r\n        $scope.$watch('map_scope_filter', function (filter) {\r\n            if(filter === undefined) return;\r\n            $scope.loadChurches();\r\n            $scope.loadTrainings();\r\n        });\r\n\r\n        //if user changes mcc\r\n        $scope.$watch('current.mcc', function (mcc) {\r\n            if (typeof mcc === 'undefined') {\r\n                $scope.trainings = [];\r\n            } else {\r\n                sendAnalytics();\r\n                $scope.loadChurches();\r\n                $scope.loadTrainings();\r\n                $scope.isTargetCitiesVisible = isTargetCityVisible();\r\n                $scope.loadTargetCities();\r\n            }\r\n        });\r\n\r\n        //hit the API and update scope with response\r\n        $scope.loadTargetCities = _.debounce(function () {\r\n            //some additional checks\r\n            if ($scope.isTargetCitiesVisible && typeof $scope.current.assignment !== 'undefined' && $scope.current.mcc === 'llm' && $scope.current.assignment.area_code !== 'undefined') {\r\n                var bounds = $scope.map.getBounds(),\r\n                    ne = bounds.getNorthEast(),\r\n                    sw = bounds.getSouthWest(),\r\n                    params = {\r\n                        lat_min: sw.lat(),\r\n                        lat_max: ne.lat(),\r\n                        long_min: sw.lng(),\r\n                        long_max: ne.lng(),\r\n                        period: $scope.current.period.format('YYYY-MM'),\r\n                        area_code: $scope.current.assignment.area_code\r\n                    };\r\n                TargetCity.searchTargetCities(params)\r\n                    .success(function (response) {\r\n                        $scope.targetCities = response\r\n                    })\r\n                    .error(function (e) {\r\n                        growl.error(gettextCatalog.getString('Unable to load target cities'));\r\n                    })\r\n            }\r\n            else {\r\n                $scope.targetCities = [];\r\n            }\r\n        }, 500);\r\n\r\n        $scope.loadTrainings = _.debounce(function () {\r\n            // Everyone can view trainings\r\n            var show_tree = false;\r\n            var show_all = false; //false means show past 12 months activity only, this does not relate to map_scope_filter, please see api wiki docs\r\n            if ($scope.map_scope_filter === 'everything' || $scope.map_scope_filter === 'tree') {\r\n                show_tree = true;\r\n            }\r\n            if (typeof $scope.current.assignment !== 'undefined' && $scope.current.mcc !== 'undefined') {\r\n                Trainings.getTrainings($scope.current.sessionToken, $scope.current.assignment.ministry_id, $scope.current.mcc, show_all, show_tree).then(function (trainings) {\r\n                    $scope.trainings = trainings;\r\n                }, function () {\r\n                    growl.error(gettextCatalog.getString('Unable to load trainings'));\r\n                });\r\n            }\r\n            else {\r\n                $scope.trainings = [];\r\n            }\r\n        }, 500);\r\n\r\n        $scope.loadChurches = _.debounce(function () {\r\n\r\n            if (typeof $scope.current.assignment === 'undefined') return;\r\n\r\n            var bounds = $scope.map.getBounds(),\r\n                ne = bounds.getNorthEast(),\r\n                sw = bounds.getSouthWest(),\r\n                params = {\r\n                    ministry_id: $scope.current.assignment.ministry_id,\r\n                    lat_min: sw.lat(),\r\n                    lat_max: ne.lat(),\r\n                    long_min: sw.lng(),\r\n                    long_max: ne.lng(),\r\n                    period: $scope.current.period.format('YYYY-MM')\r\n                };\r\n            if (!$scope.iconFilters.target_point) params['hide_target_point'] = 'true';\r\n            if (!$scope.iconFilters.group) params['hide_group'] = 'true';\r\n            if (!$scope.iconFilters.church) params['hide_church'] = 'true';\r\n            if (!$scope.iconFilters.mult_church) params['hide_mult_church'] = 'true';\r\n\r\n            if ($scope.map_scope_filter === 'everything') {\r\n                params['show_all'] = 'true';\r\n            } else if ($scope.map_scope_filter === 'tree') {\r\n                params['show_tree'] = 'true';\r\n            }\r\n\r\n            // Disable clustering at Zoom 14 and higher\r\n            if ($scope.map.getZoom() >= 14) params['should_cluster'] = 'false';\r\n\r\n            Churches.getChurches(params).$promise.then($scope.onGetChurches);\r\n        }, 500);\r\n\r\n\r\n        $scope.$watch('iconFilters.parent_lines', function () {\r\n            if (typeof $scope.map !== 'undefined') {\r\n                angular.forEach($scope.map.church_lines, function (line) {\r\n                    line.setVisible($scope.iconFilters.parent_lines);\r\n                });\r\n            }\r\n        });\r\n\r\n        $scope.$watch('iconFilters.jesus_film', function () {\r\n            if ($scope.iconFilters.jesus_film) {\r\n                $('.jf_label').show();\r\n            } else {\r\n                $('.jf_label').hide();\r\n            }\r\n        });\r\n\r\n        $scope.onAddChurch = function (church) {\r\n            GoogleAnalytics.event('church', 'create', (function () {\r\n                var dimensions = {};\r\n                dimensions[GoogleAnalytics.DIM.guid] = $scope.current.user.key_guid;\r\n                if (angular.isDefined($scope.current.assignment.ministry_id)) {\r\n                    dimensions[GoogleAnalytics.DIM.ministry_id] = $scope.current.assignment.ministry_id;\r\n                }\r\n                if (angular.isDefined($scope.current.mcc)) {\r\n                    dimensions[GoogleAnalytics.DIM.mcc] = $scope.current.mcc;\r\n                }\r\n                if (angular.isDefined($scope.current.period)) {\r\n                    dimensions[GoogleAnalytics.DIM.period] = $scope.current.period.format('YYYY-MM');\r\n                }\r\n                dimensions[GoogleAnalytics.DIM.church_id] = church.id;\r\n                return dimensions;\r\n            })());\r\n            $scope.loadChurches();\r\n        };\r\n        //creating new church icon, hit the API\r\n        $scope.addChurch = function () {\r\n            $scope.newChurchWindow.close();\r\n            angular.forEach($scope.map.markers, function (m) {\r\n\r\n                if (m.id == -1) {\r\n                    var newChurch = angular.copy($scope.new_church);\r\n                    newChurch.ministry_id = $scope.current.assignment.ministry_id;\r\n                    newChurch.latitude = m.getPosition().lat();\r\n                    newChurch.longitude = m.getPosition().lng();\r\n                    newChurch.jf_contrib = ($scope.new_church.jf_contrib == 1);\r\n\r\n                    Churches.addChurch(newChurch).$promise.then(function (response) {\r\n                            growl.success(gettextCatalog.getString('Church was created'));\r\n                            $scope.onAddChurch(response);\r\n                        }, function (e) {\r\n                            growl.error(gettextCatalog.getString('Unable to create church'));\r\n                        }\r\n                    );\r\n\r\n                    m.setMap(null);\r\n                    var removedObject = $scope.map.markers.splice($scope.map.markers.indexOf(m), 1);\r\n\r\n                    removedObject = null;\r\n                }\r\n            });\r\n        };\r\n        //create new training icon, hit the API\r\n        $scope.addTraining = function () {\r\n            angular.forEach($scope.map.markers, function (m) {\r\n\r\n                if (m.id == -2) {\r\n                    $scope.new_training.ministry_id = $scope.current.assignment.ministry_id;\r\n                    $scope.new_training.latitude = m.getPosition().lat();\r\n                    $scope.new_training.longitude = m.getPosition().lng();\r\n                    $scope.new_training.mcc = $scope.current.mcc;\r\n                    Trainings.addTraining($scope.current.sessionToken, $scope.new_training).then(function () {\r\n                            growl.success(gettextCatalog.getString('Training was created'));\r\n                            $scope.loadTrainings();\r\n                        }\r\n                    );\r\n\r\n                    m.setMap(null);\r\n                    var removedObject = $scope.map.markers.splice($scope.map.markers.indexOf(m), 1);\r\n\r\n                    removedObject = null;\r\n                }\r\n            });\r\n        };\r\n        //create new target city, hit the API\r\n        $scope.addTargetCity = function (new_targetCity) {\r\n            angular.forEach($scope.map.markers, function (m) {\r\n\r\n                if (m.id == -3) {\r\n                    new_targetCity.latitude = m.getPosition().lat();\r\n                    new_targetCity.longitude = m.getPosition().lng();\r\n                    new_targetCity.period = $scope.current.period.format('YYYY-MM');\r\n                    //send current ministry area_code to server\r\n                    if ($scope.current.assignment.area_code !== 'GLBL') {\r\n                        new_targetCity.area_code = $scope.current.assignment.area_code;\r\n                    }\r\n\r\n                    TargetCity.createTargetCity(new_targetCity)\r\n                        .success(function () {\r\n                            growl.success(gettextCatalog.getString('Target city was created successfully'));\r\n                            new_targetCity = {};\r\n                            //refresh target city icons\r\n                            $scope.loadTargetCities();\r\n                        }).error(function (e) {\r\n                            if (e.status === 400) {\r\n                                growl.error(gettextCatalog.getString('Bad Request: Unable to create target city'));\r\n                            } else {\r\n                                growl.error(gettextCatalog.getString('Error: Unable to create target city'));\r\n                            }\r\n\r\n                        });\r\n\r\n                    m.setMap(null);\r\n                    var removedObject = $scope.map.markers.splice($scope.map.markers.indexOf(m), 1);\r\n\r\n                    removedObject = null;\r\n                }\r\n            })\r\n        };\r\n\r\n        $scope.cancelAddNewIcon = function () {\r\n            angular.forEach($scope.map.markers, function (m) {\r\n                //cause all dialog windows has ids like -1,-2,-3\r\n                if (m.id < 0) {\r\n\r\n                    m.setMap(null);\r\n                    var removedObject = $scope.map.markers.splice($scope.map.markers.indexOf(m), 1);\r\n\r\n                    removedObject = null;\r\n                }\r\n            });\r\n            $scope.new_church = {};\r\n            $scope.new_training = {};\r\n            $scope.new_targetCity = {};\r\n        };\r\n        //show create new training dialog\r\n        $scope.onAddTraining = function () {\r\n            if ($scope.map.markers.filter(function (c) {\r\n                    return c.id < 0\r\n                }).length == 0) {\r\n                $scope.new_training = {};\r\n\r\n                var marker = new MarkerWithLabel({\r\n                    position: $scope.map.getCenter(),\r\n                    map: $scope.map,\r\n                    title: \"new_training\",\r\n                    id: -2,\r\n                    cluster_count: 1,\r\n                    zIndex: 9999,\r\n                    icon: $scope.map.icons.training,\r\n                    labelContent: gettextCatalog.getString('Drag to Move'),\r\n                    labelAnchor: new google.maps.Point(75, -5),\r\n                    labelClass: \"labelMoveMarker\", // the CSS class for the label\r\n                    labelInBackground: false,\r\n                    draggable: true\r\n                });\r\n\r\n                marker.setAnimation(google.maps.Animation.BOUNCE);\r\n\r\n                if (!$scope.newTrainingWindow.getContent()) {\r\n                    $scope.newTrainingWindow.setContent($scope.newTrainingContent[0].nextSibling);\r\n                }\r\n                $scope.newTrainingWindow.open($scope.map, marker);\r\n\r\n                $scope.map.markers.push(marker);\r\n            }\r\n        };\r\n        //show create new target city dialog\r\n        $scope.onAddTargetCity = function () {\r\n            if ($scope.map.markers.filter(function (c) {\r\n                    return c.id < 0\r\n                }).length == 0) {\r\n                $scope.new_targetCity = {};\r\n\r\n                var marker = new MarkerWithLabel({\r\n                    position: $scope.map.getCenter(),\r\n                    map: $scope.map,\r\n                    title: \"new_targetCity\",\r\n                    id: -3, //unique id for each type of icons used on the map\r\n                    cluster_count: 1,\r\n                    zIndex: 9999,\r\n                    icon: $scope.map.icons.targetCity,\r\n                    labelContent: gettextCatalog.getString('Drag to Move'),\r\n                    labelAnchor: new google.maps.Point(75, -5),\r\n                    labelClass: \"labelMoveMarker\", // the CSS class for the label\r\n                    labelInBackground: false,\r\n                    draggable: true\r\n                });\r\n                marker.setAnimation(google.maps.Animation.BOUNCE);\r\n\r\n                if (!$scope.newTargetCityWindow.getContent()) {\r\n                    $scope.newTargetCityWindow.setContent($scope.newTargetCityContent[0].nextSibling);\r\n                }\r\n                $scope.newTargetCityWindow.open($scope.map, marker);\r\n                //get iso countries if not loaded yet\r\n                getISOCountries();\r\n                $scope.map.markers.push(marker);\r\n            }\r\n        };\r\n\r\n        function getISOCountries() {\r\n\r\n            //don't not hit api if we already have ISOCountries\r\n            if (typeof $scope.ISOCountries !== 'undefined' && $scope.ISOCountries.length !== 0) {\r\n                return $scope.ISOCountries;\r\n            } else {\r\n                ISOCountries.getCountries()\r\n                    .success(function (response) {\r\n                        $scope.ISOCountries = response;\r\n                        $scope.ISOCountries = _.sortBy($scope.ISOCountries, 'name');\r\n                    })\r\n                    .error(function () {\r\n                        growl.error(gettextCatalog.getString('Unable to load countries list'));\r\n                    });\r\n            }\r\n\r\n        }\r\n\r\n        $scope.onSaveChurch = function (response) {\r\n            $scope.loadChurches();\r\n        };\r\n        // show create new church icon dialog\r\n        $scope.onAddIcon = function () {\r\n            if ($scope.map.markers.filter(function (c) {\r\n                    return c.id < 0\r\n                }).length == 0) {\r\n                $scope.new_church = {security: 2};\r\n\r\n                var marker = new MarkerWithLabel({\r\n                    position: $scope.map.getCenter(),\r\n                    map: $scope.map,\r\n                    title: \"new church\",\r\n                    id: -1,\r\n                    cluster_count: 1,\r\n                    zIndex: 9999,\r\n                    icon: $scope.map.icons.targetpoint,\r\n                    labelContent: gettextCatalog.getString('Drag to Move'),\r\n                    labelAnchor: new google.maps.Point(75, -20),\r\n                    labelClass: \"labelMoveMarker\", // the CSS class for the label\r\n                    labelInBackground: false,\r\n                    draggable: true\r\n                });\r\n\r\n                marker.setAnimation(google.maps.Animation.BOUNCE);\r\n\r\n                if (!$scope.newChurchWindow.getContent()) {\r\n                    $scope.newChurchWindow.setContent($scope.newChurchWindowContent[0].nextSibling);\r\n                }\r\n                $scope.newChurchWindow.open($scope.map, marker);\r\n\r\n                $scope.map.markers.push(marker);\r\n            }\r\n        };\r\n\r\n        $scope.SetParent = function () {\r\n            $scope.SetParentMode = true;\r\n            $scope.churchWindow.close();\r\n            $scope.new_parentLine = new google.maps.Polyline({\r\n                path: [new google.maps.LatLng($scope.edit_church.latitude, $scope.edit_church.longitude), new google.maps.LatLng($scope.edit_church.latitude, $scope.edit_church.longitude)],\r\n                geodesic: true,\r\n                strokeColor: '#777',\r\n                strokeOpacity: 1.0,\r\n                strokeWeight: 2,\r\n                icons: [{\r\n                    icon: {\r\n                        path: google.maps.SymbolPath.FORWARD_OPEN_ARROW,\r\n                        strokeWeight: 1.5\r\n                    },\r\n                    offset: '12px',\r\n                    repeat: '25px'\r\n                }]\r\n            });\r\n\r\n            $scope.move_event = google.maps.event.addListener($scope.map, 'mousemove', function (e) {\r\n                $scope.new_parentLine.setPath([e.latLng, new google.maps.LatLng($scope.edit_church.latitude, $scope.edit_church.longitude)]);\r\n            });\r\n\r\n            $scope.new_parentLine.setMap($scope.map);\r\n        };\r\n\r\n        /**\r\n         * Press ESC to cancel SetParent for churches\r\n         * @param evt\r\n         */\r\n        document.onkeydown = function (evt) {\r\n            evt = evt || window.event;\r\n            if ($scope.SetParentMode && evt.keyCode == 27) {\r\n                google.maps.event.removeListener($scope.move_event);\r\n                $scope.SetParentMode = false;\r\n                $scope.new_parentLine.setMap(null);\r\n            }\r\n        };\r\n\r\n        $scope.$on('$destroy', function () {\r\n            document.onkeydown = null\r\n        });\r\n\r\n\r\n        $scope.RemoveParent = function () {\r\n            $scope.churchWindow.close();\r\n            $scope.edit_church.parent_id = null;\r\n            $scope.edit_church.parents = [];\r\n            Churches.saveChurch({\r\n                id: $scope.edit_church.id,\r\n                parent_id: -1\r\n            }).$promise.then($scope.onSaveChurch);\r\n\r\n        };\r\n\r\n        $scope.makeMovableIcon = {\r\n\r\n            MoveChurch: function () {\r\n                angular.forEach($scope.map.markers, function (m) {\r\n                    if (m.id === $scope.edit_church.id) {\r\n                        m.setAnimation(google.maps.Animation.BOUNCE);\r\n                        m.setDraggable(true);\r\n                        $scope.churchWindow.close();\r\n                    }\r\n                });\r\n            },\r\n            MoveTraining: function () {\r\n                var id = $scope.edit_training.id;\r\n                angular.forEach($scope.map.markers, function (m) {\r\n                    if (m.id === 't' + id) {\r\n                        m.setAnimation(google.maps.Animation.BOUNCE);\r\n                        m.setDraggable(true);\r\n                        $scope.trainingWindow.close();\r\n                    }\r\n                });\r\n            },\r\n            MoveTargetCity: function () {\r\n                var id = $scope.edit_targetCity.target_city_id;\r\n                angular.forEach($scope.map.markers, function (m) {\r\n                    if (m.id === 'c' + id) {\r\n                        m.setAnimation(google.maps.Animation.BOUNCE);\r\n                        m.setDraggable(true);\r\n                        $scope.targetCityWindow.close();\r\n                    }\r\n                });\r\n            }\r\n\r\n        };\r\n\r\n        $scope.updateChurch = function () {\r\n            $scope.churchWindow.close();\r\n            var church = angular.copy($scope.edit_church);\r\n            church.jf_contrib = ($scope.edit_church.jf_contrib == 1);\r\n            delete church.editable;\r\n            Churches.saveChurch(church).$promise\r\n                .then(function (response) {\r\n                    growl.success(gettextCatalog.getString('Church was updated successfully'));\r\n                    $scope.onSaveChurch(response)\r\n                },\r\n                function () {\r\n                    growl.error(gettextCatalog.getString('Unable to update church'));\r\n                }\r\n            );\r\n        };\r\n\r\n        $scope.DeleteChurch = function () {\r\n\r\n            //before delete opening a confirmation dialog\r\n            $modal.open({\r\n                templateUrl: 'partials/map/_confirmation-dialog.html',\r\n                controller: confirmModalCtrl\r\n            }).result.then(function (result) {\r\n                    // Set end_date to the last day of the previous month\r\n                    $scope.edit_church.end_date = moment().subtract(1, 'months').endOf('month').format('YYYY-MM-DD');\r\n                    Churches.saveChurch($scope.edit_church).$promise.then(\r\n                        function (response) {\r\n                            growl.success(gettextCatalog.getString('Church was deleted successfully'));\r\n                            $scope.onSaveChurch(response)\r\n                        }, function () {\r\n                            growl.error(gettextCatalog.getString('Unable to delete church'));\r\n                        });\r\n                });\r\n            scrollToTop();\r\n        };\r\n\r\n        $scope.updateTraining = function () {\r\n            Trainings.updateTraining($scope.current.sessionToken, $scope.edit_training).then(\r\n                function (response) {\r\n                    growl.success(gettextCatalog.getString('Training was updated'));\r\n                    $scope.onSaveChurch(response);\r\n                }, function () {\r\n                    growl.error(gettextCatalog.getString('Unable to update training'));\r\n                }\r\n            );\r\n            $scope.trainingWindow.close();\r\n        };\r\n\r\n        $scope.updateTrainingCompletion = function (data) {\r\n            Trainings.updateTrainingCompletion($scope.current.sessionToken, data).then(function () {\r\n                growl.success(gettextCatalog.getString('Training was updated'));\r\n            });\r\n        };\r\n\r\n        $scope.updateTargetCity = function (targetCity) {\r\n            //send current ministry area_code to server\r\n            if ($scope.current.assignment.area_code !== 'GLBL') {\r\n                targetCity.area_code = $scope.current.assignment.area_code;\r\n            }\r\n            TargetCity.updateTargetCity(targetCity)\r\n                .success(function (response) {\r\n                    growl.success(gettextCatalog.getString('Target city was updated'));\r\n                }).error(function (e) {\r\n                    growl.error(gettextCatalog.getString('Unable to update target city'));\r\n                });\r\n            $scope.targetCityWindow.close();\r\n        };\r\n\r\n        $scope.$watch('trainings', function () {\r\n            if ($scope.map) {\r\n                load_training_markers();\r\n            }\r\n        });\r\n\r\n        function load_training_markers() {\r\n            if (typeof $scope.map === 'undefined') return;\r\n            var toDelete = [];\r\n\r\n            angular.forEach($scope.map.markers, function (training) {\r\n                if (training.id[0] == 't' && $scope.trainings.filter(function (t) {\r\n                        return t.id == training.id\r\n                    }).length == 0) {\r\n                    toDelete.push(training);\r\n                }\r\n                else if (training.id[0] == 't' && !$scope.iconFilters.training) toDelete.push(training);\r\n            });\r\n\r\n            angular.forEach(toDelete, function (training) {\r\n                training.setMap(null);\r\n                var removedObject = $scope.map.markers.splice($scope.map.markers.indexOf(training), 1);\r\n                removedObject = null;\r\n            });\r\n\r\n            if ($scope.iconFilters.training) {\r\n                angular.forEach($scope.trainings, function (training) {\r\n                    if ($scope.map.markers.filter(function (c) {\r\n                            return c.id === 't' + training.id\r\n                        }).length == 0) {\r\n                        if (training.longitude) {\r\n                            var marker = new MarkerWithLabel({\r\n                                position: new google.maps.LatLng(training.latitude, training.longitude),\r\n                                map: $scope.map,\r\n                                id: 't' + training.id,\r\n                                title: training.name + ' (' + training.type + ')',\r\n                                icon: $scope.map.icons.training,\r\n                                labelContent: '', //training.type + '<span class=\"map-trained-count\">' + training.leaders_trained + '</span>',\r\n                                labelAnchor: new google.maps.Point(30, 0),\r\n                                labelClass: \"labelMarker\", // the CSS class for the label\r\n                                labelInBackground: false,\r\n                                draggable: false\r\n                            });\r\n                            marker.setAnimation(google.maps.Animation.DROP);\r\n                            if (!$scope.trainingWindow.getContent()) {\r\n                                $scope.trainingWindow.setContent($scope.trainingWindowContent[0].nextSibling);\r\n                            }\r\n\r\n                            google.maps.event.addListener(marker, 'click', (function (training, marker) {\r\n                                return function () {\r\n                                    $scope.edit_training = training;\r\n\r\n                                    //checking if training is editable\r\n                                    $scope.edit_training.editable = false;\r\n\r\n                                    var parent_ids = getParentMinistryIds($scope.current.assignments, $scope.edit_training);\r\n\r\n                                    //if training ministry id is child or equal to parent id\r\n                                    var parent_id = _.find(parent_ids, function (id) {\r\n                                        return id === $scope.current.assignment.ministry_id;\r\n                                    });\r\n\r\n                                    //checking if parent id is not empty\r\n                                    if (typeof parent_id !== 'undefined') {\r\n\r\n                                        //if training ministry id is same as parent id\r\n                                        if ($scope.edit_training.ministry_id === parent_id) {\r\n\r\n                                            if ($scope.edit_training.created_by === $scope.current.user.person_id || isLeaderAdmin() === true) {\r\n                                                $scope.edit_training.editable = true;\r\n                                            }\r\n\r\n                                            //case for parent ministry trying to edit(checking user role before giving permission)\r\n                                        } else if (isLeaderAdmin() === true) {\r\n                                            $scope.edit_training.editable = true;\r\n                                        }\r\n                                    }\r\n\r\n                                    $scope.$apply();\r\n                                    $scope.trainingWindow.close();\r\n                                    $scope.trainingWindow.setOptions({maxWidth: 400});\r\n                                    $scope.trainingWindow.open($scope.map, marker);\r\n\r\n                                }\r\n                            }(training, marker, $scope)));\r\n\r\n                            google.maps.event.addListener(marker, 'dragend', (function () {\r\n                                training.latitude = marker.getPosition().lat();\r\n                                training.longitude = marker.getPosition().lng();\r\n                                Trainings.updateTraining($scope.current.sessionToken, training).then($scope.onSaveChurch);\r\n                                marker.setAnimation(null);\r\n                                marker.setDraggable(false);\r\n                            }));\r\n\r\n                            $scope.map.markers.push(marker);\r\n                        }\r\n                    }\r\n                });\r\n            }\r\n        }\r\n\r\n        //watch for icon filters\r\n        $scope.$watch('iconFilters.training', load_training_markers, true);\r\n        $scope.$watch('iconFilters.targetCity', function () {\r\n            load_target_city_markers();\r\n        }, true);\r\n\r\n        //watch for server response\r\n        $scope.$watch('targetCities', function () {\r\n            if ($scope.map) {\r\n                load_target_city_markers();\r\n            }\r\n        });\r\n\r\n        function load_target_city_markers() {\r\n            if (typeof $scope.map === 'undefined') return;\r\n            //note: using 'c' as a prefix in target city markers id\r\n            var toDelete = [];\r\n            //collect cities to be deleted\r\n            angular.forEach($scope.map.markers, function (targetCity) {\r\n                if (targetCity.id[0] == 'c' && $scope.targetCities.filter(function (t) {\r\n                        return targetCity.id === 'c' + t.target_city_id;\r\n                    }).length == 0) {\r\n                    toDelete.push(targetCity);\r\n                }\r\n                else if (targetCity.id[0] == 'c' && !$scope.iconFilters.targetCity) toDelete.push(targetCity);\r\n            });\r\n            //remove target cities from markers\r\n            angular.forEach(toDelete, function (targetCity) {\r\n                targetCity.setMap(null);\r\n                var removedObject = $scope.map.markers.splice($scope.map.markers.indexOf(targetCity), 1);\r\n                removedObject = null;\r\n            });\r\n\r\n            if ($scope.isTargetCitiesVisible && $scope.iconFilters.targetCity) {\r\n                angular.forEach($scope.targetCities, function (targetCity) {\r\n                    if ($scope.map.markers.filter(function (c) {\r\n                            return c.id === 'c' + targetCity.target_city_id;\r\n                        }).length == 0) {\r\n                        if (targetCity.longitude) {\r\n                            var marker = new MarkerWithLabel({\r\n                                position: new google.maps.LatLng(targetCity.latitude, targetCity.longitude),\r\n                                map: $scope.map,\r\n                                id: 'c' + targetCity.target_city_id,\r\n                                title: targetCity.name,\r\n                                icon: $scope.map.icons.targetCity,\r\n                                labelContent: '',\r\n                                labelAnchor: new google.maps.Point(30, 0),\r\n                                labelClass: \"labelMarker\", // the CSS class for the label\r\n                                labelInBackground: false,\r\n                                draggable: false\r\n                            });\r\n                            marker.setAnimation(google.maps.Animation.DROP);\r\n                            if (!$scope.targetCityWindow.getContent()) {\r\n                                $scope.targetCityWindow.setContent($scope.targetCityWindowContent[0].nextSibling);\r\n                            }\r\n                            //register events on icon/marker\r\n                            google.maps.event.addListener(marker, 'click', (function (targetCity, marker) {\r\n                                return function () {\r\n                                    $scope.edit_targetCity = targetCity;\r\n\r\n                                    $scope.$apply();\r\n                                    $scope.targetCityWindow.close();\r\n                                    $scope.targetCityWindow.setOptions({maxWidth: 300});\r\n\r\n                                    getISOCountries();\r\n                                    $scope.targetCityWindow.open($scope.map, marker);\r\n\r\n                                }\r\n                            }(targetCity, marker, $scope)));\r\n\r\n                            //update marker lat and lang (position) upon drag\r\n                            google.maps.event.addListener(marker, 'dragend', (function () {\r\n                                targetCity.latitude = marker.getPosition().lat();\r\n                                targetCity.longitude = marker.getPosition().lng();\r\n\r\n                                TargetCity.updateTargetCity(targetCity)\r\n                                    .success(function (response) {\r\n                                        growl.success(gettextCatalog.getString('Target city position was updated'));\r\n                                    }).error(function (e) {\r\n                                        growl.error(gettextCatalog.getString('Unable to update target city'))\r\n                                    });\r\n                                marker.setAnimation(null);\r\n                                marker.setDraggable(false);\r\n                            }));\r\n\r\n                            $scope.map.markers.push(marker);\r\n                        }\r\n                    }\r\n                });\r\n            }\r\n\r\n        }\r\n\r\n        $scope.onGetChurches = function (response) {\r\n            if ($scope.current.mcc === 'gcm') {\r\n                $scope.churches = response;\r\n            } else {\r\n                response = [];\r\n                $scope.churches = [];\r\n            }\r\n\r\n            //remove church lines\r\n            angular.forEach($scope.map.church_lines, function (l) {\r\n                l.setMap(null);\r\n            });\r\n\r\n            // do more intelligent replace\r\n            //remove elements that are not in the new one.\r\n            var toDelete = [];\r\n\r\n            angular.forEach($scope.map.markers, function (church) {\r\n                if (church.id > 0) {\r\n                    if (response.filter(function (c) {\r\n                            return c.id == church.id && c.cluster_count == 1\r\n                        }).length == 0 || church.cluster_count > 1) {\r\n                        toDelete.push(church);\r\n                    }\r\n                }\r\n            });\r\n\r\n            angular.forEach(toDelete, function (church) {\r\n                //remove jf icons one by one\r\n                angular.element('div#map_canvas div#jf_icon_' + church.id + '.jf_label').remove();\r\n                church.setMap(null);\r\n                var removedObject = $scope.map.markers.splice($scope.map.markers.indexOf(church), 1);\r\n\r\n                removedObject = null;\r\n            });\r\n\r\n\r\n            angular.forEach($scope.churches, function (church) {\r\n                if ($scope.map.markers.filter(function (c) {\r\n                        return c.id == church.id\r\n                    }).length == 0) {\r\n                    var marker = {};\r\n\r\n                    if (church.cluster_count == 1) {\r\n                        var churchIconToUse = {};\r\n                        if (church.development == 5) {\r\n                            churchIconToUse = $scope.map.icons.multiplying;\r\n                        }\r\n                        else if (church.development == 4) {\r\n                            churchIconToUse = $scope.map.icons.church;\r\n                        }\r\n                        else if (church.development == 3) {\r\n                            churchIconToUse = $scope.map.icons.church;\r\n                        }\r\n                        else if (church.development == 2) {\r\n                            churchIconToUse = $scope.map.icons.group;\r\n                        }\r\n                        else if (church.development == 1) {\r\n                            churchIconToUse = $scope.map.icons.targetpoint;\r\n                        }\r\n                        else {\r\n                            churchIconToUse = $scope.map.icons.church;\r\n                        }\r\n\r\n                        marker = new MarkerWithLabel({\r\n                            position: new google.maps.LatLng(church.latitude, church.longitude),\r\n                            map: $scope.map,\r\n                            title: church.name,\r\n                            id: church.id,\r\n                            cluster_count: church.cluster_count,\r\n                            icon: churchIconToUse,\r\n                            labelContent: church.name,\r\n                            labelAnchor: new google.maps.Point(30, 0),\r\n                            labelClass: \"labelMarker\", // the CSS class for the label\r\n                            labelInBackground: false,\r\n                            draggable: false\r\n                        });\r\n                        marker.setAnimation(google.maps.Animation.DROP);\r\n                        if (church.jf_contrib >= 1) {\r\n                            new $scope.jesusFilmSign(new google.maps.LatLng(church.latitude, church.longitude), church.jf_contrib, church.development, church.id);\r\n                        }\r\n                    }\r\n                    else {\r\n                        marker = new MarkerWithLabel({\r\n                            position: new google.maps.LatLng(church.latitude, church.longitude),\r\n                            map: $scope.map,\r\n                            title: 'Click to zoom',\r\n                            id: church.id,\r\n                            cluster_count: church.cluster_count,\r\n                            icon: $scope.map.icons.cluster,\r\n                            labelContent: church.cluster_count.toString(),\r\n                            labelAnchor: new google.maps.Point(30, 15),\r\n                            labelClass: \"clusterMarker\", // the CSS class for the label\r\n                            labelInBackground: false\r\n\r\n                        });\r\n                        if (church.jf_contrib > 1) {\r\n                            new $scope.jesusFilmSign(new google.maps.LatLng(church.latitude, church.longitude), church.jf_contrib, 'cluster', church.id);\r\n                        }\r\n\r\n                    }\r\n                    if (!$scope.churchWindow.getContent()) {\r\n                        $scope.churchWindow.setContent($scope.churchWindowContent[0].nextSibling);\r\n                    }\r\n\r\n                    google.maps.event.addListener(marker, 'click', (function (church, marker) {\r\n                        return function () {\r\n                            if ($scope.SetParentMode) {\r\n                                if (church.cluster_count == 1 && church.id !== $scope.edit_church.id && !_.contains(church.parents, $scope.edit_church.id)) {\r\n                                    google.maps.event.removeListener($scope.move_event);\r\n                                    $scope.SetParentMode = false;\r\n                                    $scope.new_parentLine.setPath([new google.maps.LatLng(church.latitude, church.longitude), new google.maps.LatLng($scope.edit_church.latitude, $scope.edit_church.longitude)]);\r\n                                    //update church's parent\r\n                                    var new_church = {};\r\n                                    new_church.id = $scope.edit_church.id;\r\n                                    new_church.parent_id = church.id;\r\n                                    $scope.edit_church.parent_id = church.id;\r\n                                    $scope.edit_church.parents = [church.id];\r\n                                    Churches.saveChurch(new_church).$promise.then($scope.onSaveChurch);\r\n                                }\r\n                                else {\r\n                                    google.maps.event.removeListener($scope.move_event);\r\n                                    $scope.SetParentMode = false;\r\n                                    $scope.new_parentLine.setMap(null);\r\n                                }\r\n                                return;\r\n                            }\r\n\r\n                            if (church.cluster_count == 1) {\r\n                                $scope.edit_church = church;\r\n                                $scope.edit_church.jf_contrib = ($scope.edit_church.jf_contrib >= 1 ) ? 1 : 0;\r\n\r\n                                //checking if church is editable\r\n                                $scope.edit_church.editable = false;\r\n                                var parent_ids = getParentMinistryIds($scope.current.assignments, $scope.edit_church);\r\n\r\n                                //if training ministry id is child or equal to parent id\r\n                                var parent_id = _.find(parent_ids, function (id) {\r\n                                    return id === $scope.current.assignment.ministry_id;\r\n                                });\r\n\r\n                                //checking if parent id is not empty\r\n                                if (typeof parent_id !== 'undefined') {\r\n\r\n                                    //if ministry id is same as parent id\r\n                                    if ($scope.edit_church.ministry_id === parent_id) {\r\n\r\n                                        if ($scope.edit_church.created_by === $scope.current.user.person_id || isLeaderAdmin() === true) {\r\n                                            $scope.edit_church.editable = true;\r\n                                        }\r\n\r\n                                        //case for parent ministry trying to edit(checking user role before giving permission)\r\n                                    } else if (isLeaderAdmin() === true) {\r\n                                        $scope.edit_church.editable = true;\r\n                                    }\r\n                                }\r\n\r\n                                $scope.$apply();\r\n                                $scope.churchWindow.close();\r\n                                $scope.churchWindow.setOptions({maxWidth: 300});\r\n                                $scope.churchWindow.open($scope.map, marker);\r\n                            }\r\n                            else {\r\n                                $scope.map.setCenter(marker.position);\r\n                                $scope.map.setZoom($scope.map.getZoom() + 2);\r\n                            }\r\n                        }\r\n                    }(church, marker, $scope)));\r\n\r\n                    google.maps.event.addListener(marker, 'dragend', (function (church, marker) {\r\n                        return function () {\r\n\r\n                            if (church.cluster_count == 1) {\r\n                                var new_church = {};\r\n                                new_church.id = church.id;\r\n                                new_church.latitude = marker.getPosition().lat();\r\n                                new_church.longitude = marker.getPosition().lng();\r\n                                church.latitude = new_church.latitude;\r\n                                church.longitude = new_church.longitude;\r\n                                Churches.saveChurch(new_church).$promise.then($scope.onSaveChurch);\r\n\r\n                                marker.setAnimation(null);\r\n                                marker.setDraggable(false);\r\n                            }\r\n\r\n                        }\r\n                    }(church, marker)));\r\n                    $scope.map.markers.push(marker);\r\n                }\r\n\r\n\r\n                //now create the parent lines\r\n                angular.forEach(church.parents, function (p) {\r\n                    var par = $scope.churches.filter(function (c) {\r\n                        return c.id == p\r\n                    });\r\n                    if (par.length > 0) {\r\n                        var parentLine = new google.maps.Polyline({\r\n                            path: [new google.maps.LatLng(par[0].latitude, par[0].longitude), new google.maps.LatLng(church.latitude, church.longitude)],\r\n                            geodesic: true,\r\n                            strokeColor: '#777',\r\n                            strokeOpacity: 1.0,\r\n                            strokeWeight: 2,\r\n                            icons: [{\r\n                                icon: {\r\n                                    path: google.maps.SymbolPath.FORWARD_OPEN_ARROW,\r\n                                    strokeWeight: 1.5\r\n                                },\r\n                                offset: '12px',\r\n                                repeat: '25px'\r\n                            }]\r\n                        });\r\n                        parentLine.setMap($scope.map);\r\n                        $scope.map.church_lines.push(parentLine);\r\n                    }\r\n                });\r\n\r\n\r\n            });\r\n\r\n\r\n        };\r\n\r\n        /**\r\n         * Draws a jesus film rectangle icon on map\r\n         * @param coordinates\r\n         * @param number\r\n         * @param type\r\n         * @param id church id\r\n         */\r\n        $scope.jesusFilmSign = function (coordinates, number, type, id) {\r\n            this.div_ = null;\r\n            this.setMap($scope.map);\r\n            if (number == 1) number = \"JF\";\r\n\r\n            // onADD\r\n            this.onAdd = function () {\r\n                var div = document.createElement('div');\r\n                div.className = 'jf_label';\r\n                div.id = 'jf_icon_' + id;\r\n                div.innerHTML = number;\r\n                this.div_ = div;\r\n                var panes = this.getPanes();\r\n                panes.overlayMouseTarget.appendChild(div);\r\n            };\r\n\r\n            // draw\r\n            this.draw = function () {\r\n                var div = this.div_;\r\n                var overlayProjection = this.getProjection();\r\n                var position = overlayProjection.fromLatLngToDivPixel(coordinates);\r\n\r\n                // displacement of sign\r\n                var x;\r\n                var y;\r\n\r\n                if (type == 'cluster') {\r\n                    x = -20;\r\n                    y = 8;\r\n                }\r\n\r\n                else if (type >= 0 && type <= 1) {\r\n                    x = -23;\r\n                    y = -12;\r\n                }\r\n\r\n                else if (type == 2) {\r\n                    x = -22;\r\n                    y = -13;\r\n                }\r\n\r\n                else if (type >= 3) {\r\n                    x = -20;\r\n                    y = -13;\r\n                }\r\n\r\n                else {\r\n                    x = 0;\r\n                    y = 0;\r\n                }\r\n\r\n                div.style.left = position.x + x + \"px\";\r\n                div.style.top = position.y + y + \"px\";\r\n            };\r\n\r\n            this.onRemove = function () {\r\n                this.div_.parentNode.removeChild($scope.div_);\r\n                this.div_ = null;\r\n            }\r\n        };\r\n        $scope.jesusFilmSign.prototype = new google.maps.OverlayView();\r\n\r\n        $scope.addTrainingStage = function (training) {\r\n            if (training.insert === undefined || training.insert.date === undefined || training.insert.number_completed === undefined) return false;\r\n            var newPhase = {\r\n                phase: training.current_stage,\r\n                date: training.insert.date,\r\n                number_completed: training.insert.number_completed,\r\n                training_id: training.id\r\n\r\n            };\r\n            Trainings.addTrainingCompletion($scope.current.sessionToken, newPhase).then($scope.onAddTrainingCompletion);\r\n\r\n            training.insert.date = \"\";\r\n            training.insert.number_completed = 0;\r\n\r\n        };\r\n\r\n        $scope.onAddTrainingCompletion = function (response) {\r\n            response.editMode = false;\r\n            growl.success(gettextCatalog.getString('Training was saved successfully'));\r\n            angular.forEach($scope.trainings, function (training) {\r\n                var id = training.hasOwnProperty('Id') ? training.Id : training.id;\r\n                if (id == response.training_id) {\r\n                    training.gcm_training_completions.push(response);\r\n                    training.current_stage = response.phase + 1;\r\n                }\r\n            });\r\n        };\r\n\r\n        //function deletes the training\r\n        $scope.DeleteTraining = function () {\r\n\r\n            //opening a confirmation dialog before deleting\r\n            $modal.open({\r\n                templateUrl: 'partials/map/_confirmation-dialog.html',\r\n                controller: confirmModalCtrl\r\n            }).result.then(function (result) {\r\n\r\n                    Trainings.deleteTraining($scope.current.sessionToken, $scope.edit_training)\r\n                        .then(function (data) {\r\n                            growl.success(gettextCatalog.getString('Training was deleted successfully'));\r\n                            $scope.trainingWindow.close();\r\n                            $scope.loadTrainings();\r\n                        }, function (e) {\r\n                            growl.error(gettextCatalog.getString('Unable to delete training'));\r\n                        });\r\n                });\r\n            scrollToTop();\r\n        };\r\n\r\n        //function deletes the target city\r\n        $scope.DeleteTargetCity = function (target_city) {\r\n\r\n            //opening a confirmation dialog before deleting\r\n            $modal.open({\r\n                templateUrl: 'partials/map/_confirmation-dialog.html',\r\n                controller: confirmModalCtrl\r\n            }).result.then(function (result) {\r\n\r\n                    TargetCity.deleteTargetCity(target_city.target_city_id)\r\n                        .success(function (data) {\r\n                            growl.success(gettextCatalog.getString('Target city was deleted successfully'));\r\n                            $scope.targetCityWindow.close();\r\n                            $scope.loadTargetCities();\r\n                        })\r\n                        .error(function (e) {\r\n                            growl.error(gettextCatalog.getString('Unable to delete target city'));\r\n\r\n                        });\r\n                });\r\n            scrollToTop();\r\n\r\n        };\r\n\r\n        //function deletes stages of training\r\n        $scope.deleteTrainingComplete = function (training_complete, index) {\r\n\r\n            //opening a confirmation dialog before deleting\r\n            $modal.open({\r\n                templateUrl: 'partials/map/_confirmation-dialog.html',\r\n                controller: confirmModalCtrl\r\n            }).result.then(function (result) {\r\n\r\n                    Trainings.deleteTrainingCompletion($scope.current.sessionToken, training_complete)\r\n                        .then(function (data) {\r\n                            growl.success(gettextCatalog.getString('Training stage was deleted successfully'));\r\n                            $scope.edit_training.gcm_training_completions.splice(index, 1);\r\n                        });\r\n\r\n                });\r\n            scrollToTop();\r\n        };\r\n\r\n        $scope.setMyDefaultMapView = function () {\r\n\r\n            var center = $scope.map.getCenter();\r\n\r\n            //save user preference\r\n            var post_data = {\r\n                \"default_map_views\": [{\r\n                    \"ministry_id\": $scope.current.assignment.ministry_id,\r\n                    \"location\": {\r\n                        \"latitude\": center.lat(),\r\n                        \"longitude\": center.lng()\r\n                    },\r\n                    \"location_zoom\": $scope.map.getZoom()\r\n                }\r\n                ]\r\n            };\r\n            //save user preference\r\n            UserPreference.savePreference(post_data).success(function (data) {\r\n                growl.success(gettextCatalog.getString('Your default map view has been set'));\r\n                $scope.current.user_preferences = data;\r\n            }, function () {\r\n                growl.error(gettextCatalog.getString('Unable to save default map view'));\r\n            });\r\n\r\n        };\r\n\r\n        $scope.setMinistryDefaultView = function () {\r\n            var center = $scope.map.getCenter();\r\n\r\n            // Save changes to API\r\n            Ministries.updateMinistry({\r\n                ministry_id: $scope.current.assignment.ministry_id,\r\n                min_code: $scope.current.assignment.min_code.trim(),\r\n                location: {\r\n                    latitude: center.lat(),\r\n                    longitude: center.lng()\r\n                },\r\n                location_zoom: $scope.map.getZoom()\r\n            }, function (d) {\r\n                growl.success(gettextCatalog.getString('Default ministry map view has been set'));\r\n            }, function () {\r\n                growl.error(gettextCatalog.getString('Unable to save default map view'));\r\n            });\r\n        };\r\n\r\n        $scope.myLocation = function () {\r\n            if (navigator.geolocation) {\r\n                navigator.geolocation.getCurrentPosition(function (position) {\r\n                    var center = new google.maps.LatLng(position.coords.latitude, position.coords.longitude);\r\n                    $scope.map.setCenter(center);\r\n                    $scope.map.setZoom(15);\r\n                }, function () {\r\n                    growl.error(gettextCatalog.getString('Failed to get your current location'))\r\n                });\r\n            }\r\n            else {\r\n                growl.error(gettextCatalog.getString('Your browser does not support GeoLocation'));\r\n            }\r\n        };\r\n\r\n        //function creates array of all parent ids of ministry id including id of item to check\r\n        function getParentMinistryIds(assignments, item) {\r\n            var ministries = UserPreference.getFlatMinistry(assignments);\r\n            var ids = [];\r\n            ids.push(item.ministry_id);\r\n            parentId(item.ministry_id, ministries);\r\n            ids = _.uniq(ids);\r\n            return ids;\r\n\r\n            //recursive parent id fetch loop function\r\n            function parentId(id, ministries) {\r\n                angular.forEach(ministries, function (ministry) {\r\n                    if (ministry.ministry_id === id) {\r\n                        ids.push(ministry.parent_id);\r\n                        parentId(ministry.parent_id, ministries);\r\n                    }\r\n                });\r\n            }\r\n        }\r\n\r\n        //function checks whether the current user is a leader/admin for current assignment\r\n        function isLeaderAdmin() {\r\n            return ($scope.current.hasRole(['admin', 'inherited_admin', 'leader', 'inherited_leader']));\r\n        }\r\n\r\n        function confirmModalCtrl($scope, $modalInstance) {\r\n            $scope.yes = function () {\r\n                $modalInstance.close(true);\r\n            };\r\n\r\n            $scope.no = function () {\r\n                $modalInstance.dismiss('cancel');\r\n            };\r\n        }\r\n\r\n        /**\r\n         * Check if target cities can be view/create/edit\r\n         * @returns {boolean}\r\n         */\r\n        function isTargetCityVisible() {\r\n            //if no assignment return early\r\n            if (typeof $scope.current.assignment === 'undefined') {\r\n                return false;\r\n            }\r\n            //check for required role\r\n            if (!$scope.current.hasRole(['admin', 'inherited_admin', 'leader', 'inherited_leader', 'member'])) {\r\n                return false;\r\n            }\r\n            if (typeof $scope.current.mcc === 'undefined') {\r\n                return false;\r\n            }\r\n            //only visible to llm\r\n            if ($scope.current.mcc === 'llm') {\r\n                //ministry must have an area code\r\n                if (typeof $scope.current.assignment.area_code !== 'undefined' && typeof $scope.current.assignment.ministry_scope !== 'undefined') {\r\n                    //ministry_scope should be 'Area' or 'Global'\r\n                    if ($scope.current.assignment.ministry_scope == 'Area' || $scope.current.assignment.ministry_scope == 'National') {\r\n                        return true;\r\n                    }\r\n                }\r\n            }\r\n\r\n            return false;\r\n        }\r\n\r\n        $scope.addStoryToIcon = function (icon, type) {\r\n            $modal.open({\r\n                templateUrl: 'partials/stories/new-story-dialog.html',\r\n                size: 'lg',\r\n                controller: function ($scope, $modalInstance, modalData) {\r\n                    $scope.imageFile = {};\r\n                    $scope.storiesConfig = modalData.storiesConfig;\r\n                    $scope.iconName = modalData.iconName;\r\n\r\n                    $scope.close = function () {\r\n                        $modalInstance.dismiss('cancel');\r\n                    };\r\n\r\n                    $scope.saveStory = function (story) {\r\n                        $modalInstance.close({\r\n                            story: story,\r\n                            imageFile: $scope.imageFile\r\n                        });\r\n                    };\r\n                },\r\n                resolve: {\r\n                    modalData: function () {\r\n                        return {\r\n                            iconName: angular.copy(icon.name),\r\n                            storiesConfig: angular.copy(Settings.stories)\r\n                        }\r\n                    }\r\n                }\r\n            }).result.then(function (data) {\r\n\r\n                    //prepare story data to send\r\n                    data.story[type + '_id'] = icon.id;\r\n                    data.story.location = {\r\n                        latitude: icon.latitude,\r\n                        longitude: icon.longitude\r\n                    };\r\n\r\n                    Stories.createStory(data.story)\r\n                        .success(function (response) {\r\n                            growl.success('Story saved successfully');\r\n                            if (typeof data.imageFile.resized !== 'undefined') {\r\n                                //prepare form data for image file\r\n                                var form_data = new FormData();\r\n                                form_data.append('image-file', data.imageFile.resized.blob, data.imageFile.file.name);\r\n                                //Start uploading image file\r\n                                Stories.uploadStoryImage(response.story_id, form_data)\r\n                                    .success(function (img) {\r\n                                        growl.success(gettextCatalog.getString('Image file was uploaded'));\r\n                                    })\r\n                                    .error(function (e) {\r\n                                        if (e.status === 400) {\r\n                                            growl.error(gettextCatalog.getString('Upload failed, Invalid file input'));\r\n                                        } else {\r\n                                            growl.error(gettextCatalog.getString('Unable to upload image file'));\r\n                                        }\r\n                                    });\r\n                            }\r\n                        })\r\n                        .error(function () {\r\n                            growl.error(gettextCatalog.getString('Failed to save story'));\r\n                        });\r\n\r\n                });\r\n            //close all dialogWindow\r\n            $scope.churchWindow.close();\r\n            $scope.trainingWindow.close();\r\n            scrollToTop();\r\n        };\r\n\r\n        function scrollToTop() {\r\n            window.setTimeout(function () {\r\n                window.parent.scrollTo(0, 0);\r\n            }, 10);\r\n        }\r\n\r\n        $scope.canAddStories = function (icon) {\r\n            if (typeof icon === 'undefined') return false;\r\n            if (typeof icon.ministry_id === 'undefined') return false;\r\n            //old churches or training which does not have ministry_id can not be tagged\r\n            if (icon.ministry_id === null || icon.ministry_id === '') return false;\r\n\r\n            if (icon.ministry_id !== $scope.current.assignment.ministry_id) {\r\n                return false;\r\n            }\r\n            return $scope.current.hasRole(['admin', 'inherited_admin', 'leader', 'inherited_leader', 'member']);\r\n        }\r\n    }\r\n\r\n    angular.module('gma.controllers.map').controller('MapCtrl', MapCtrl);\r\n})(jQuery);\r\n","(function () {\r\n    'use strict';\r\n\r\n    function MeasurementDetailsCtrl($scope, $modalInstance, Measurements, Assignments, measurement, details, Settings, GoogleAnalytics) {\r\n        $scope.spinner = true;\r\n        $scope.measurement = measurement;\r\n        $scope.details = details;\r\n        $scope.ns = Settings.gmaNamespace;\r\n\r\n        var sendAnalytics = _.throttle(function () {\r\n            GoogleAnalytics.screen('Measurement Details', (function () {\r\n                var dimensions = {};\r\n                dimensions[GoogleAnalytics.DIM.guid] = $scope.current.user.key_guid;\r\n                if (angular.isDefined($scope.current.assignment.ministry_id)) {\r\n                    dimensions[GoogleAnalytics.DIM.ministry_id] = $scope.current.assignment.ministry_id;\r\n                }\r\n                if (angular.isDefined($scope.current.mcc)) {\r\n                    dimensions[GoogleAnalytics.DIM.mcc] = $scope.current.mcc;\r\n                }\r\n                if (angular.isDefined($scope.current.period)) {\r\n                    dimensions[GoogleAnalytics.DIM.period] = $scope.current.period.format('YYYY-MM');\r\n                }\r\n                if (angular.isDefined($scope.details.perm_link_stub)) {\r\n                    dimensions[GoogleAnalytics.DIM.perm_link] = $scope.details.perm_link_stub;\r\n                }\r\n                return dimensions;\r\n            })());\r\n        }, 1000, {leading: false});\r\n\r\n        $scope.details.$promise.then(function () {\r\n            $scope.spinner = false;\r\n            sendAnalytics();\r\n\r\n            var da = [['Period', 'Personal', 'Local Team', 'Total']];\r\n            angular.forEach(details.total, function (t, period) {\r\n                angular.forEach(details.local, function (l, p) {\r\n                    if (p === period) {\r\n                        angular.forEach(details.my_measurements, function (m, p) {\r\n                            if (p === period) da.push([p, m, l, t])\r\n                        });\r\n                    }\r\n                });\r\n            });\r\n            $scope.trend = google.visualization.arrayToDataTable(da);\r\n        });\r\n\r\n        $scope.filterSource = function (items) {\r\n            var result = {};\r\n            angular.forEach(items, function (value, key) {\r\n                if (key != Settings.gmaNamespace && key != 'total') {\r\n                    result[key] = value;\r\n                }\r\n            });\r\n            return result;\r\n        };\r\n\r\n        $scope.saveDetails = function () {\r\n            $scope.spinner = true;\r\n            var measurements = [];\r\n            angular.forEach(['local', 'person'], function (type) {\r\n                if ($scope.editForm.hasOwnProperty(type) && $scope.editForm[type].$dirty && typeof $scope.editForm[type] !== 'undefined') {\r\n                    measurements.push({\r\n                        period: $scope.current.period.format('YYYY-MM'),\r\n                        mcc: $scope.current.mcc,\r\n                        source: Settings.gmaNamespace,\r\n                        measurement_type_id: $scope.details.measurement_type_ids[type],\r\n                        related_entity_id: type == 'local'\r\n                            ? $scope.current.assignment.ministry_id\r\n                            : $scope.current.assignment.id,\r\n                        value: $scope.editForm[type].$modelValue\r\n                    });\r\n                }\r\n            });\r\n\r\n            if (measurements.length > 0) {\r\n                Measurements.saveMeasurement({}, measurements, function () {\r\n                    $modalInstance.close();\r\n                });\r\n            }\r\n            else {\r\n                $modalInstance.dismiss('cancel');\r\n            }\r\n        };\r\n\r\n        $scope.close = function () {\r\n            $modalInstance.dismiss('cancel');\r\n        };\r\n\r\n        $scope.approveSelfAssigned = function (user, role) {\r\n            var user = user;\r\n            user.state = 'pending';\r\n            Assignments.saveAssignment({\r\n                assignment_id: user.assignment_id\r\n            }, {team_role: role}, function () {\r\n                if (role == 'blocked') {\r\n                    user.state = 'blocked';\r\n                    user.blocked = true;\r\n                } else {\r\n                    user.success = true;\r\n                    user.state = 'member';\r\n                }\r\n            }, function () {\r\n                delete user.state;\r\n            });\r\n        };\r\n    }\r\n\r\n    angular.module('gma.controllers.measurements').controller('MeasurementDetailsCtrl', MeasurementDetailsCtrl);\r\n})();\r\n","(function () {\r\n    'use strict';\r\n\r\n    function MeasurementsCtrl($scope, $modal, $location, Measurements, UserPreference, Settings, GoogleAnalytics, $interval, growl, gettextCatalog) {\r\n\r\n        var defaultLocale = 'en-US';\r\n        $scope.current.isLoaded = false;\r\n        $scope.currentLanguage = defaultLocale;\r\n        $scope.ns = Settings.gmaNamespace;\r\n\r\n        var sendAnalytics = _.throttle(function () {\r\n            GoogleAnalytics.screen('Measurements', (function () {\r\n                var dimensions = {};\r\n                dimensions[GoogleAnalytics.DIM.guid] = $scope.current.user.key_guid;\r\n                if (angular.isDefined($scope.current.assignment.ministry_id)) {\r\n                    dimensions[GoogleAnalytics.DIM.ministry_id] = $scope.current.assignment.ministry_id;\r\n                }\r\n                if (angular.isDefined($scope.current.mcc)) {\r\n                    dimensions[GoogleAnalytics.DIM.mcc] = $scope.current.mcc;\r\n                }\r\n                if (angular.isDefined($scope.current.period)) {\r\n                    dimensions[GoogleAnalytics.DIM.period] = $scope.current.period.format('YYYY-MM');\r\n                }\r\n                return dimensions;\r\n            })());\r\n        }, 1000, {leading: false});\r\n\r\n        $scope.$watch('current.assignment.ministry_id', function (old, newVal) {\r\n            if (typeof old !== 'undefined') {\r\n                if ($scope.current.canAccessCurrentTab() && typeof $scope.current.mcc !== 'undefined') {\r\n                    //only need to decide preferred language if user changes the ministry\r\n                    $scope.currentLanguage = decideLocaleToLoad();\r\n                    getMeasurements();\r\n                    sendAnalytics();\r\n                    $scope.current.loadLanguages();\r\n                    setMeasurementStates();\r\n                }\r\n                else {\r\n                    $scope.current.redirectToHomeTab();\r\n                }\r\n            }\r\n        });\r\n\r\n        $scope.$watch('current.mcc', function (old) {\r\n            getMeasurements();\r\n            sendAnalytics();\r\n            if (old !== undefined) {\r\n                setMeasurementStates();\r\n            }\r\n        });\r\n\r\n        $scope.$watch('current.period', function () {\r\n            getMeasurements();\r\n            sendAnalytics();\r\n        });\r\n\r\n        // Debounced method to fetch Measurements at most once every 100 milliseconds\r\n        var getMeasurements = _.debounce(function () {\r\n            if (typeof $scope.current.assignment !== 'undefined' && typeof $scope.current.period !== 'undefined' && typeof $scope.current.mcc !== 'undefined') {\r\n\r\n                $scope.loadMeasurements($scope.currentLanguage);\r\n            }\r\n        }, 100);\r\n\r\n        /**\r\n         * Also fires on change event of language selector\r\n         * Always pass a language, default = en-us\r\n         * @param language\r\n         */\r\n        $scope.loadMeasurements = function (language) {\r\n            //be fail safe\r\n            if (language === undefined || language === '') {\r\n                language = defaultLocale;\r\n            }\r\n            $scope.current.isLoaded = false;\r\n            $scope.measurements = Measurements.getMeasurements({\r\n                ministry_id: $scope.current.assignment.ministry_id,\r\n                mcc: $scope.current.mcc,\r\n                locale: language,\r\n                period: $scope.current.period.format('YYYY-MM')\r\n            }, function () {\r\n                $scope.current.isLoaded = true;\r\n            }, function () {\r\n                $scope.current.isLoaded = true;\r\n                growl.error(gettextCatalog.getString('Unable to load measurements'));\r\n            });\r\n        };\r\n\r\n\r\n        function decideLocaleToLoad() {\r\n            //check for user-preferred locale , if not found then load default\r\n            if (typeof $scope.current.user_preferences === 'undefined') {\r\n                return defaultLocale;\r\n            }\r\n            if (typeof $scope.current.user_preferences.content_locales === 'undefined') {\r\n                return defaultLocale;\r\n            }\r\n            if (typeof $scope.current.user_preferences.content_locales[$scope.current.assignment.ministry_id] !== 'undefined') {\r\n                return $scope.current.user_preferences.content_locales[$scope.current.assignment.ministry_id];\r\n            }\r\n\r\n            return defaultLocale;\r\n        }\r\n\r\n\r\n        $scope.hasOther = function () {\r\n            return _.where($scope.measurements, {section: 'other', column: 'other'}).length > 0;\r\n        };\r\n\r\n        // Method used to save measurements\r\n        $scope.saveMeasurements = function () {\r\n            var measurements = [];\r\n            angular.forEach($scope.measurements, function (measurement) {\r\n                angular.forEach(['person', 'local'], function (type) {\r\n                    if ($scope.lmiForm.hasOwnProperty(measurement.measurement_type_ids[type])) {\r\n                        var type_id = measurement.measurement_type_ids[type],\r\n                            input = $scope.lmiForm[type_id];\r\n\r\n                        if (input.$dirty && input.$valid) {\r\n                            measurements.push({\r\n                                period: $scope.current.period.format('YYYY-MM'),\r\n                                mcc: $scope.current.mcc,\r\n                                source: Settings.gmaNamespace,\r\n                                measurement_type_id: type_id,\r\n                                related_entity_id: type === 'person' ? $scope.current.assignment.id : $scope.current.assignment.ministry_id,\r\n                                value: input.$modelValue\r\n                            });\r\n                        }\r\n                    }\r\n                });\r\n            });\r\n\r\n            if (measurements.length > 0) {\r\n                Measurements.saveMeasurement({}, measurements, function (response) {\r\n                    growl.success(gettextCatalog.getString('Measurements saved successfully'));\r\n                    getMeasurements();\r\n                    $scope.lmiForm.$setPristine();\r\n                }, function () {\r\n                    growl.error(gettextCatalog.getString('Unable to save measurements'));\r\n                });\r\n            }\r\n        };\r\n\r\n        $scope.filterByLangCode = function (lang) {\r\n            if (typeof $scope.current.assignment.content_locales !== 'undefined') {\r\n                return (_.contains($scope.current.assignment.content_locales, lang.iso_code)) ? lang : false;\r\n            } else {\r\n                return false;\r\n            }\r\n        };\r\n\r\n        $scope.editMeasurementDetails = function (measurement) {\r\n            var instance = $modal.open({\r\n                templateUrl: 'partials/measurements/details.html',\r\n                controller: 'MeasurementDetailsCtrl',\r\n                keyboard: true,\r\n                backdrop: true,\r\n                resolve: {\r\n                    'measurement': function () {\r\n                        return measurement;\r\n                    },\r\n                    'details': function () {\r\n                        // Return the promise so resolve waits\r\n                        return Measurements.getMeasurement({\r\n                            perm_link_stub: measurement.perm_link_stub,\r\n                            ministry_id: $scope.current.assignment.ministry_id,\r\n                            mcc: $scope.current.mcc,\r\n                            period: $scope.current.period.format('YYYY-MM')\r\n                        });\r\n                    }\r\n                }\r\n            });\r\n            instance.result.then(function () {\r\n                //setting confirmation message\r\n                growl.success(gettextCatalog.getString('Measurements updated successfully'));\r\n                getMeasurements();\r\n            });\r\n            window.setTimeout(function () {\r\n                window.parent.scrollTo(0, 0);\r\n            }, 10);\r\n        };\r\n\r\n\r\n        function setMeasurementStates() {\r\n\r\n            $scope.measurementState = {};\r\n            //get settings from config.php\r\n            var states_from_config = {};\r\n            if (typeof Settings.default_measurement_states[$scope.current.mcc] !== 'undefined') {\r\n                states_from_config = angular.copy(Settings.default_measurement_states[$scope.current.mcc]);\r\n            }\r\n\r\n            //get user preference from user profile\t, will override default (defined in config.php)\r\n            if (typeof $scope.current.user_preferences !== 'undefined' && typeof $scope.current.user_preferences.default_measurement_states !== \"undefined\") {\r\n\r\n                //check if current mcc exists in default_measurement_states\r\n                if (typeof $scope.current.user_preferences.default_measurement_states[$scope.current.mcc] !== 'undefined') {\r\n                    $scope.measurementState = $scope.current.user_preferences.default_measurement_states[$scope.current.mcc];\r\n                }\r\n                else {\r\n                    $scope.measurementState = states_from_config;\r\n                }\r\n\r\n            } else {\r\n                $scope.measurementState = states_from_config;\r\n            }\r\n        }\r\n\r\n        var autoSave = $interval(function () {\r\n            //if user in inside measurement tab and view has been loaded\r\n            if ($scope.current.isLoaded && $location.path() === '/measurements') {\r\n\r\n                if ($scope.current.mcc !== 'undefined' && (_.size($scope.measurementState) > 0)) {\r\n\r\n                    var post_data = {\"default_measurement_states\": {}};\r\n                    post_data.default_measurement_states[$scope.current.mcc] = $scope.measurementState;\r\n                    UserPreference.savePreference(post_data).success(function (data) {\r\n\r\n                    }, function (e) {\r\n                        //stop auto-saving if server sends 500 or 400\r\n                        if (e.status === 500 || e.status === 400) {\r\n                            $interval.cancel(autoSave);\r\n                        }\r\n                    });\r\n\r\n                }\r\n            }\r\n        }, 60000);\r\n\r\n        $scope.$on('$destroy', function () {\r\n            $interval.cancel(autoSave);\r\n        });\r\n\r\n        $scope.toggleMeasurementState = function (measurementState, perm_link_stub) {\r\n            measurementState[perm_link_stub] = (measurementState[perm_link_stub] === 1) ? 0 : 1;\r\n        };\r\n\r\n        $scope.checkMeasureState = function (measurement) {\r\n\r\n            if (measurement.supported_staff_only === true) {\r\n                if ($scope.current.user_preferences.supported_staff !== 'undefined') {\r\n                    if ($scope.current.user_preferences.supported_staff == '1') {\r\n                        if (measurement.leader_only === true) {\r\n\r\n                            return $scope.current.hasRole(['admin', 'inherited_admin', 'leader', 'inherited_leader']);\r\n\r\n                        }\r\n                        return true;\r\n                    }\r\n                    else {\r\n                        return false;\r\n                    }\r\n\r\n                }\r\n                else {\r\n                    return false;\r\n                }\r\n            }\r\n            if (measurement.leader_only === true) {\r\n                return $scope.current.hasRole(['admin', 'inherited_admin', 'leader', 'inherited_leader']);\r\n            }\r\n\r\n            return true;\r\n        };\r\n\r\n    }\r\n\r\n    angular.module('gma.controllers.measurements').controller('MeasurementsCtrl', MeasurementsCtrl);\r\n})();\r\n","(function () {\r\n    'use strict';\r\n    function UserPreferenceCtrl($scope, $location, $modalInstance, modelData, UserPreference, growl, Settings, gettextCatalog) {\r\n        //set some defaults\r\n        $scope.options = {\r\n            supported_staff: '0',\r\n            hide_reports_tab: '0', //0 means visible\r\n            static_locale: 'en-us',\r\n            content_locales: {}\r\n        };\r\n        //collect data for looping\r\n        $scope.ministries = _.sortBy(UserPreference.getFlatMinistry($scope.current.assignments), 'name');\r\n        $scope.mccs = _.sortBy(UserPreference.getMappedMCCS($scope.current.assignment.mccs, modelData.mccLabels), 'mccLabel');\r\n        $scope.staticLocales = angular.copy(Settings.static_locales);\r\n\r\n        $scope.current.loadLanguages();\r\n\r\n        //override user preferences from token response\r\n        if (typeof $scope.current.user_preferences === 'object') {\r\n            $scope.options = angular.extend({}, $scope.options, angular.copy($scope.current.user_preferences));\r\n        }\r\n        //get supported languages by this ministry\r\n        var supportedLanguages = {};\r\n        if (typeof $scope.current.assignment.content_locales !== 'undefined') {\r\n            supportedLanguages = angular.copy($scope.current.assignment.content_locales);\r\n        }\r\n        $scope.filterByLangCode = function (lang) {\r\n\r\n            return (_.contains(supportedLanguages, lang.iso_code)) ? lang : false;\r\n\r\n        };\r\n\r\n        $scope.savePreference = function (options) {\r\n            //reduce payload weight\r\n            delete options.default_map_views;\r\n            delete options.default_measurement_states;\r\n            UserPreference.savePreference(options)\r\n                .success(function (data) {\r\n                    growl.success(gettextCatalog.getString('Your preferences were saved'));\r\n                    //if user want to hide reports tab and is on reports tab so\r\n                    if (options.hide_reports_tab == 1 && $location.path() == '/reports') {\r\n                        $scope.current.redirectToHomeTab();\r\n                    }\r\n                    //update root scope\r\n                    $scope.current.user_preferences = data;\r\n                })\r\n                .error(function () {\r\n                    growl.error(gettextCatalog.getString('Unable to save preferences'));\r\n                });\r\n            $modalInstance.close(true);\r\n        };\r\n\r\n        $scope.changeMCCS = function (ministry_id) {\r\n            if (ministry_id === \"\" || ministry_id === null) {\r\n                $scope.mccs = [];\r\n                $scope.options.preferred_mcc = \"\";\r\n                return false;\r\n            }\r\n            var ministry = _.find($scope.ministries, function (mini) {\r\n                return (mini.ministry_id === ministry_id);\r\n            });\r\n            if (typeof ministry !== 'undefined') {\r\n                $scope.mccs = _.sortBy(UserPreference.getMappedMCCS(ministry.mccs, modelData.mccLabels), 'mccLabel');\r\n                //additional check if there is no mccs then default_mcc should be empty in every case\r\n                if (_.size($scope.mccs) == 0) {\r\n                    $scope.options.preferred_mcc = \"\";\r\n                }\r\n            } else {\r\n                $scope.options.preferred_mcc = \"\";\r\n                $scope.mccs = [];\r\n            }\r\n\r\n        };\r\n        $scope.changeMCCS($scope.options.preferred_ministry);\r\n\r\n        $scope.close = function () {\r\n            $modalInstance.dismiss('cancel');\r\n        };\r\n\r\n    }\r\n\r\n    angular.module('gma.controllers.preference').controller('UserPreferenceCtrl', UserPreferenceCtrl);\r\n})();\r\n","(function () {\r\n    'use strict';\r\n\r\n    function ReportsCtrl($scope, Measurements, GoogleAnalytics, gettextCatalog, growl) {\r\n        $scope.chart = new google.visualization.LineChart(document.getElementById('reports-chart'));\r\n        $scope.table = new google.visualization.Table(document.getElementById('reports-table'));\r\n\r\n        var sendAnalytics = _.throttle(function () {\r\n            GoogleAnalytics.screen('Reports', (function () {\r\n                var dimensions = {};\r\n                dimensions[GoogleAnalytics.DIM.guid] = $scope.current.user.key_guid;\r\n                if (angular.isDefined($scope.current.assignment.ministry_id)) {\r\n                    dimensions[GoogleAnalytics.DIM.ministry_id] = $scope.current.assignment.ministry_id;\r\n                }\r\n                if (angular.isDefined($scope.current.mcc)) {\r\n                    dimensions[GoogleAnalytics.DIM.mcc] = $scope.current.mcc;\r\n                }\r\n                if (angular.isDefined($scope.current.period)) {\r\n                    dimensions[GoogleAnalytics.DIM.period] = $scope.current.period.format('YYYY-MM');\r\n                }\r\n                return dimensions;\r\n            })());\r\n        }, 1000, {leading: false});\r\n\r\n        // Debounced method to fetch Measurements at most once every 100 milliseconds\r\n        var getMeasurements = _.debounce(function () {\r\n            if (typeof $scope.current.assignment !== 'undefined' && typeof $scope.current.period !== 'undefined' && typeof $scope.current.mcc !== 'undefined') {\r\n                delete $scope.dataTable;\r\n                $scope.current.isLoaded = false;\r\n                $scope.measurements = Measurements.getMeasurements({\r\n                    ministry_id: $scope.current.assignment.ministry_id,\r\n                    mcc: $scope.current.mcc,\r\n                    period: $scope.current.period.format('YYYY-MM'),\r\n                    historical: true\r\n                }, function () {\r\n                    $scope.current.isLoaded = true;\r\n                    sendAnalytics();\r\n\r\n                    var chartData = new google.visualization.DataTable(),\r\n                        tableData = new google.visualization.DataTable(),\r\n                        rows = [];\r\n                    chartData.addColumn('string', 'Date');\r\n                    angular.forEach($scope.dates, function (date, index) {\r\n                        rows[index] = [date];\r\n                        angular.forEach($scope.measurements, function (measurement) {\r\n                            if (index === 0) {\r\n                                chartData.addColumn('number', measurement.name);\r\n                            }\r\n                            rows[index].push(measurement.total[date]);\r\n                        });\r\n                    });\r\n                    chartData.addRows(rows);\r\n                    $scope.dataTable = chartData;\r\n\r\n                    tableData.addColumn('string', 'Measurement');\r\n                    angular.forEach($scope.measurements, function (measurement, index) {\r\n                        var row = [];\r\n                        angular.forEach($scope.dates, function (date) {\r\n                            if (index === 0) tableData.addColumn('number', date);\r\n                            row.push(measurement.total[date]);\r\n                        });\r\n                        if (index === 0) tableData.addColumn('number', 'Total');\r\n                        tableData.addRow([measurement.name].concat(row, [walterMeanAvg(row)]));\r\n                    });\r\n                    $scope.tableDataTable = tableData;\r\n                }, function () {\r\n                    $scope.current.isLoaded = true;\r\n                    delete $scope.dataTable;\r\n                    growl.error(gettextCatalog.getString('Unable to load measurements for reporting'))\r\n                });\r\n            }\r\n        }, 100);\r\n\r\n        $scope.$watch('current.assignment.ministry_id', function (ministry_id) {\r\n            if (typeof ministry_id !== 'undefined') {\r\n                if ($scope.current.canAccessCurrentTab()) {\r\n                    getMeasurements();\r\n                } else {\r\n                    $scope.current.redirectToHomeTab();\r\n                }\r\n            }\r\n\r\n        });\r\n\r\n        $scope.$watch('current.mcc', function () {\r\n            getMeasurements();\r\n        });\r\n\r\n        $scope.$watch('current.period', function (period) {\r\n            if (typeof period === 'undefined') return;\r\n            getMeasurements();\r\n\r\n            var now = period.clone(),\r\n                dates = [];\r\n            for (var i = 0; i < 12; i++) {\r\n                dates.push(now.clone().format('YYYY-MM'));\r\n                now.subtract(1, 'M');\r\n            }\r\n            $scope.dates = dates.reverse();\r\n        });\r\n\r\n        $scope.$watch('dataTable', function (data) {\r\n            if (typeof data === 'undefined') return;\r\n            $scope.chart.draw(data, {\r\n                chartArea: {\r\n                    top: 20,\r\n                    left: 50,\r\n                    width: '80%',\r\n                    height: '90%'\r\n                },\r\n                legend: {\r\n                    alignment: 'start',\r\n                    position: 'right'\r\n                },\r\n                orientation: 'horizontal'\r\n            });\r\n        });\r\n\r\n        $scope.$watch('tableDataTable', function (data) {\r\n            if (typeof data === 'undefined') return;\r\n            $scope.table.draw(data, {});\r\n        });\r\n\r\n        function walterMeanAvg(data) {\r\n            // Drop zeros\r\n            var values = [],\r\n                total = 0;\r\n            angular.forEach(data, function (val) {\r\n                if (val === 0) return;\r\n                values.push(val);\r\n            });\r\n\r\n            if (values.length === 0) return 0;\r\n\r\n            if (values.length > 4) {\r\n                // Sort array\r\n                values.sort(function (a, b) {\r\n                    return a - b;\r\n                });\r\n\r\n                // Remove first element, lowest\r\n                values.shift();\r\n\r\n                // Remove last element, highest\r\n                values.pop();\r\n            }\r\n\r\n            // Sum the values\r\n            angular.forEach(values, function (val) {\r\n                total = total + val;\r\n            });\r\n\r\n            // Return the average\r\n            return Math.round((total / values.length) * 100) / 100;\r\n        }\r\n    }\r\n\r\n    angular.module('gma.controllers.reports').controller('ReportsCtrl', ReportsCtrl);\r\n})();\r\n","(function () {\r\n    'use strict';\r\n\r\n    function StoriesCtrl($scope, $modal, growl, Stories, Settings, $filter, gettextCatalog) {\r\n        $scope.current.isLoaded = false;\r\n        $scope.storiesLoaded = false;\r\n        $scope.feedsLoaded = false;\r\n        //get configs from settings\r\n        $scope.versionUrl = Settings.versionUrl;\r\n        $scope.storiesConfig = angular.copy(Settings.stories);\r\n        //init story pagination\r\n        $scope.storiesNav = {\r\n            currentPage: 1,\r\n            perPage: $scope.storiesConfig.stories_per_page || 5\r\n        };\r\n        //init feeds pagination\r\n        $scope.feedsNav = {\r\n            currentPage: 1,\r\n            perPage: $scope.storiesConfig.feeds_count || 10\r\n        };\r\n        //lets keep some story search params in scope,  we may add some more in future\r\n        $scope.storiesParams = {\r\n            self_only: false\r\n        };\r\n\r\n        $scope.$watch('current.assignment.ministry_id', function (assignment, oldVal) {\r\n\r\n            if (typeof assignment !== 'undefined') {\r\n                if ($scope.current.canAccessCurrentTab()) {\r\n                    $scope.current.isLoaded = true;\r\n                    //load data from server\r\n                    $scope.searchStories(1, $scope.storiesParams); //load first page\r\n                    $scope.loadNewsFeeds(1);\r\n                } else {\r\n                    $scope.current.redirectToHomeTab();\r\n                }\r\n            }\r\n        });\r\n\r\n        function scrollToTop() {\r\n            window.setTimeout(function () {\r\n                window.parent.scrollTo(0, 0);\r\n            }, 10);\r\n        }\r\n\r\n        $scope.loadNewsFeeds = function (page) {\r\n            $scope.feedsLoaded = false;\r\n            var params = {\r\n                ministry_id: $scope.current.assignment.ministry_id,\r\n                per_page: $scope.storiesConfig.feeds_count || 10,\r\n                page: page || 1\r\n            };\r\n            Stories.getNewsFeeds(params).\r\n                success(function (response) {\r\n                    $scope.feedsLoaded = true;\r\n                    $scope.recentNewsFeeds = response.entries;\r\n                    //update pagination nav\r\n                    $scope.feedsNav.totalItems = response.meta.total;\r\n                    $scope.feedsNav.currentPage = response.meta.page;\r\n                })\r\n                .error(function (e) {\r\n                    $scope.feedsLoaded = true;\r\n                    growl.error(gettextCatalog.getString('Error loading news feeds'));\r\n                });\r\n\r\n        };\r\n\r\n        $scope.searchStories = function (page, storiesParams) {\r\n            $scope.storiesLoaded = false;\r\n            var params = {\r\n                ministry_id: $scope.current.assignment.ministry_id,\r\n                per_page: $scope.storiesConfig.stories_per_page || 5,\r\n                page: page || 1,\r\n                self_only: false\r\n            };\r\n            //fail safe\r\n            if (typeof storiesParams !== 'undefined') {\r\n                params.self_only = storiesParams.self_only\r\n            }\r\n\r\n            Stories.searchStories(params)\r\n                .success(function (response) {\r\n                    $scope.storiesLoaded = true;\r\n                    $scope.visibleStories = response.stories;\r\n                    //update pagination nav\r\n                    $scope.storiesNav.totalItems = response.meta.total;\r\n                    $scope.storiesNav.currentPage = response.meta.page;\r\n\r\n                })\r\n                .error(function (e) {\r\n                    $scope.storiesLoaded = true;\r\n                    growl.error(gettextCatalog.getString('Unable to load stories'));\r\n                });\r\n        };\r\n\r\n        $scope.newStory = function () {\r\n\r\n            $modal.open({\r\n                templateUrl: 'partials/stories/new-story-dialog.html',\r\n                size: 'lg',\r\n                controller: function ($scope, $modalInstance, modalData) {\r\n                    $scope.story = {};\r\n                    $scope.imageFile = {};\r\n                    $scope.storiesConfig = modalData.storiesConfig;\r\n\r\n                    $scope.close = function () {\r\n                        $modalInstance.dismiss('cancel');\r\n                    };\r\n                    $scope.removeImage = function () {\r\n                        angular.element(\"#image-file\").val('');\r\n                        $scope.imageFile = {};\r\n                    };\r\n                    $scope.saveStory = function (story) {\r\n                        $modalInstance.close({\r\n                            story: story,\r\n                            imageFile: $scope.imageFile\r\n                        });\r\n                    }\r\n\r\n                },\r\n                resolve: {\r\n                    modalData: function () {\r\n                        return {\r\n                            storiesConfig: angular.copy($scope.storiesConfig)\r\n                        }\r\n                    }\r\n                }\r\n            }).result.then(function (data) {\r\n                    var originalParams = angular.copy($scope.storiesParams);\r\n                    Stories.createStory(data.story)\r\n                        .success(function (response) {\r\n                            response.created_at = $filter('date')(new Date(), 'yyyy-MM-dd');\r\n                            growl.success(gettextCatalog.getString('Story saved successfully'));\r\n                            if (typeof data.imageFile.resized !== 'undefined') {\r\n                                //Start uploading image file\r\n                                uploadStoryImage(response.story_id, data.imageFile)\r\n                                    .success(function (img) {\r\n                                        growl.success(gettextCatalog.getString('Image file was uploaded'));\r\n                                        //find new story in list and update image url\r\n                                        var found_story = _.findWhere($scope.visibleStories, {story_id: img.story_id});\r\n                                        if (found_story !== undefined) {\r\n                                            found_story.image_url = img.image_url;\r\n                                        }\r\n                                    })\r\n                                    .error(function (e) {\r\n                                        showUploadError(e)\r\n                                    });\r\n\r\n                            }\r\n                            //if user is on first page, and params are same as before\r\n                            if ($scope.storiesNav.currentPage === 1 && angular.equals(originalParams, $scope.storiesParams)) {\r\n                                if ($scope.visibleStories.length === 0) {\r\n                                    $scope.visibleStories = response\r\n                                } else {\r\n                                    $scope.visibleStories.push(response);\r\n                                }\r\n                            }\r\n                        })\r\n                        .error(function () {\r\n                            growl.error(gettextCatalog.getString('Failed to save story'));\r\n                        });\r\n                });\r\n            scrollToTop();\r\n\r\n        };\r\n\r\n        $scope.viewStory = function (story) {\r\n            $modal.open({\r\n                templateUrl: 'partials/stories/view-story-dialog.html',\r\n                size: 'lg',\r\n                controller: function ($scope, $modalInstance, modalData) {\r\n                    $scope.story = modalData.story;\r\n                    $scope.versionUrl = modalData.versionUrl;\r\n                    $scope.isSelfOnlyEnabled = modalData.self_only;\r\n\r\n                    $scope.close = function () {\r\n                        $modalInstance.dismiss('cancel');\r\n                    };\r\n                },\r\n                resolve: {\r\n                    modalData: function () {\r\n                        return {\r\n                            story: angular.copy(story),\r\n                            versionUrl: $scope.versionUrl,\r\n                            self_only: angular.copy($scope.storiesParams.self_only)\r\n                        }\r\n                    }\r\n                }\r\n            });\r\n            scrollToTop();\r\n        };\r\n\r\n        $scope.editStory = function (story) {\r\n            var originalStory = story;\r\n            $modal.open({\r\n                templateUrl: 'partials/stories/edit-story-dialog.html',\r\n                size: 'lg',\r\n                controller: function ($scope, $modalInstance, modalData) {\r\n\r\n                    $scope.story = modalData.story;\r\n                    $scope.storiesConfig = modalData.storiesConfig;\r\n\r\n                    $scope.imageFile = {};\r\n                    if (typeof $scope.story.image_url !== 'undefined' && $scope.story.image_url !== '') {\r\n                        $scope.imageFile.url = $scope.story.image_url + '?v=' + $scope.story.updated_at;\r\n                    }\r\n\r\n                    $scope.close = function () {\r\n                        $modalInstance.dismiss('cancel');\r\n                    };\r\n\r\n                    $scope.updateStory = function (editStory) {\r\n                        $modalInstance.close({\r\n                            editStory: editStory,\r\n                            imageFile: $scope.imageFile\r\n                        });\r\n                    };\r\n                },\r\n                resolve: {\r\n                    modalData: function () {\r\n                        return {\r\n                            storiesConfig: angular.copy($scope.storiesConfig),\r\n                            story: angular.copy(story)\r\n                        }\r\n                    }\r\n                }\r\n            }).result.then(function (data) {\r\n                    //fixed a bug , that was causing a 500\r\n                    delete data.editStory.church_id;\r\n                    delete data.editStory.training_id;\r\n\r\n                    Stories.updateStory(data.editStory)\r\n                        .success(function (response) {\r\n                            growl.success(gettextCatalog.getString('Story was updated'));\r\n                            //update current story list with new contents\r\n                            angular.extend(originalStory, response);\r\n                            if (typeof data.imageFile.resized !== 'undefined') {\r\n                                //Start uploading image file\r\n                                uploadStoryImage(response.story_id, data.imageFile)\r\n                                    .success(function (img) {\r\n                                        angular.extend(originalStory, img);\r\n                                        growl.success(gettextCatalog.getString('Image file was uploaded'));\r\n                                    })\r\n                                    .error(function (e) {\r\n                                        showUploadError(e)\r\n                                    });\r\n\r\n                            }\r\n                        })\r\n                        .error(function (e) {\r\n                            growl.error(gettextCatalog.getString('Unable to update story'));\r\n                        });\r\n                });\r\n            scrollToTop();\r\n        };\r\n\r\n        function uploadStoryImage(story_id, imageFile) {\r\n            var form_data = new FormData();\r\n            form_data.append('image-file', imageFile.resized.blob, imageFile.file.name);\r\n\r\n            return Stories.uploadStoryImage(story_id, form_data);\r\n\r\n        }\r\n\r\n        function showUploadError(e) {\r\n            if (e.status === 400) {\r\n                growl.error(gettextCatalog.getString('Upload failed, Invalid file input'));\r\n            } else {\r\n                growl.error(gettextCatalog.getString('Unable to upload image file'));\r\n            }\r\n        }\r\n\r\n        $scope.isStoryEditable = function (story) {\r\n\r\n            if (story.ministry_id === $scope.current.assignment.ministry_id) {\r\n                //admin and leaders can edit any story but within his ministry\r\n                if ($scope.current.hasRole(['admin', 'inherited_admin', 'leader', 'inherited_leader'])) {\r\n                    return true;\r\n                }\r\n            }\r\n\r\n            //you can always edit your own story\r\n            return ($scope.current.user.person_id === story.created_by);\r\n        };\r\n\r\n\r\n    }\r\n\r\n    angular.module('gma.controllers.stories').controller('StoriesCtrl', StoriesCtrl);\r\n}());","(function () {\r\n\t'use strict';\r\n\r\n\tfunction GoogleAnalyticsService( $location, Settings ) {\r\n\t\treturn {\r\n\t\t\tDIM: {\r\n\t\t\t\tguid:        'dimension1',\r\n\t\t\t\tministry_id: 'dimension2',\r\n\t\t\t\tmcc:         'dimension3',\r\n\t\t\t\tperiod:      'dimension4',\r\n\t\t\t\tperm_link:   'dimension5',\r\n\t\t\t\tchurch_id:   'dimension6',\r\n\t\t\t\ttraining_id: 'dimension7'\r\n\t\t\t},\r\n\t\t\tinit:   function () {\r\n\t\t\t\tif ( Settings.googleAnalytics === false ) return;\r\n\r\n\t\t\t\t// Initialize Google Analytics\r\n\t\t\t\tga( 'create', Settings.googleAnalytics, 'auto' );\r\n\t\t\t\tga( 'set', {\r\n\t\t\t\t\t'appName':        'GMA (' + Settings.appEnvironment + ')',\r\n\t\t\t\t\t'appId':          'com.expidev.javascript.' + Settings.appEnvironment,\r\n\t\t\t\t\t'appVersion':     Settings.version,\r\n\t\t\t\t\t'appInstallerId': $location.host()\r\n\t\t\t\t} );\r\n\t\t\t},\r\n\t\t\tscreen: function ( screen, dimensions ) {\r\n\t\t\t\tif ( Settings.googleAnalytics === false ) return;\r\n\r\n\t\t\t\tdimensions = typeof dimensions !== 'undefined' ? dimensions : {};\r\n\t\t\t\tdimensions.screenName = screen;\r\n\t\t\t\tga( 'send', 'screenview', dimensions );\r\n\t\t\t},\r\n\t\t\tevent:  function ( category, action, dimensions ) {\r\n\t\t\t\tif ( Settings.googleAnalytics === false ) return;\r\n\r\n\t\t\t\tdimensions = typeof dimensions !== 'undefined' ? dimensions : {};\r\n\t\t\t\tga( 'send', 'event', category, action, dimensions );\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\tangular.module( 'gma.services.googleAnalytics' ).factory( 'GoogleAnalytics', GoogleAnalyticsService );\r\n})();\r\n","(function () {\n\t'use strict';\n\n\tfunction Assignments( $resource, Settings ) {\n\t\treturn $resource( Settings.api.measurements( '/assignments/:assignment_id' ), {assignment_id: '@assignment_id'}, {\n\t\t\tgetAssignment:  {method: 'GET'},\n\t\t\tgetAssignments: {method: 'GET', isArray: true},\n\t\t\tsaveAssignment: {method: 'PUT'},\n\t\t\taddTeamMember:  {method: 'POST'}\n\t\t} );\n\t}\n\n\tangular.module( 'gma.services.measurements' ).factory( 'Assignments', Assignments );\n})();\n","(function () {\n\t'use strict';\n\n\tfunction Churches( $resource, Settings ) {\n\t\treturn $resource( Settings.api.measurements( '/churches/:church_id' ), {}, {\n\t\t\tgetChurch:   {method: 'GET'},\n\t\t\tgetChurches: {method: 'GET', isArray: true},\n\t\t\taddChurch:   {method: 'POST'},\n\t\t\tsaveChurch:  {method: 'PUT', params: {church_id: '@id'}}\n\t\t} );\n\t}\n\n\tangular.module( 'gma.services.measurements' ).factory( 'Churches', Churches );\n})();\n","(function () {\r\n    'use strict';\r\n\r\n    function ISOCountries( $http, Settings ) {\r\n        return{\r\n            getCountries : function(){\r\n                return $http.get(Settings.api.measurements('/iso_countries'))\r\n            }\r\n        }\r\n    }\r\n\r\n    angular.module( 'gma.services.measurements' ).factory( 'ISOCountries', ISOCountries );\r\n})();\r\n","(function () {\r\n    'use strict';\r\n\r\n    function Languages($http, Settings) {\r\n        return {\r\n            getLanguages: function () {\r\n                return $http.get(Settings.api.measurements('/languages'))\r\n            }\r\n        }\r\n    }\r\n\r\n    angular.module('gma.services.measurements').factory('Languages', Languages);\r\n})();\r\n","(function () {\r\n    'use strict';\r\n\r\n    function MeasurementTypes($resource, Settings) {\r\n        return $resource(Settings.api.measurements('/measurement_types/:measurement_type_id'), {}, {\r\n            getMeasurementType: {\r\n                method: 'GET',\r\n                params: {measurement_type_id: '@measurement_type_id', ministry_id: '@ministry_id', locale: '@locale'}\r\n            },\r\n            getMeasurementTypes: {\r\n                method: 'GET',\r\n                isArray: true,\r\n                params: {ministry_id: '@ministry_id', locale: '@locale'}\r\n            },\r\n            updateMeasurementType: {\r\n                method: 'PUT',\r\n                params: {measurement_type_id: '@measurement_type_id', ministry_id: '@ministry_id', locale: '@locale'}\r\n            },\r\n            addMeasurementType: {\r\n                method: 'POST',\r\n                params: {ministry_id: '@ministry_id', locale: '@locale'}\r\n            }\r\n        });\r\n    }\r\n\r\n    angular.module('gma.services.measurements').factory('MeasurementTypes', MeasurementTypes);\r\n})();\r\n","(function () {\n\t'use strict';\n\n\tfunction Measurements( $resource, Settings ) {\n\t\treturn $resource( Settings.api.measurements( '/measurements/:perm_link_stub' ), {}, {\n\t\t\tgetMeasurement:  {method: 'GET'},\n\t\t\tgetMeasurements: {method: 'GET', isArray: true, params: {source: Settings.gmaNamespace}},\n\t\t\tsaveMeasurement: {method: 'POST'}\n\t\t} );\n\t}\n\n\tangular.module( 'gma.services.measurements' ).factory( 'Measurements', Measurements );\n})();\n","(function () {\n\t'use strict';\n\n\tfunction Ministries( $resource, Settings ) {\n\t\treturn $resource( Settings.api.measurements( '/ministries/:ministry_id' ), {}, {\n\t\t\tgetMinistry:    {method: 'GET'},\n\t\t\tgetMinistries:  {method: 'GET', isArray: true},\n\t\t\tupdateMinistry: {method: 'PUT', params: {ministry_id: '@ministry_id'}},\n\t\t\tcreateMinistry: {method: 'POST'}\n\t\t} );\n\t}\n\n\tangular.module( 'gma.services.measurements' ).factory( 'Ministries', Ministries );\n\n})();\n","(function () {\r\n\t'use strict';\r\n\r\n\tfunction Session( $rootScope, $injector, $q, $log, Settings, $location ) {\r\n\t\tvar token;\r\n\r\n\t\tvar startSession = function ( ticket ) {\r\n\t\t\tif ( \"false\" === ticket ) {\r\n\t\t\t\twindow.location = Settings.api.login;\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t\treturn $injector.get( '$http' ).get( Settings.api.measurements( '/token' ), {params: {st: ticket}} )\r\n\t\t\t\t.then( function ( response ) {\r\n\t\t\t\t\t$rootScope.current.user = response.data.user;\r\n\t\t\t\t\t$rootScope.current.sessionToken = response.data.session_ticket;\r\n                    //additional check, be fail safe\r\n                    if (typeof response.data.user_preferences === 'object') {\r\n                        $rootScope.current.user_preferences = response.data.user_preferences;\r\n                    } else {\r\n                        delete $rootScope.current.user_preferences;\r\n                    }\r\n\r\n\t\t\t\t\ttoken = response.data.session_ticket;\r\n\t\t\t\t\tif ( typeof response.data.assignments === 'object' && response.data.assignments.length) {\r\n\t\t\t\t\t\t$rootScope.current.assignments = response.data.assignments;\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tdelete $rootScope.current.assignments;\r\n\t\t\t\t\t}\r\n\t\t\t\t\t$rootScope.$broadcast( 'sessionStart', response.data );\r\n\r\n\t\t\t\t\treturn response.data;\r\n\t\t\t\t} );\r\n\t\t};\r\n\r\n\t\treturn {\r\n\t\t\tstartSession:  function ( ticket ) {\r\n\t\t\t\tstartSession( ticket );\r\n\t\t\t},\r\n\t\t\tlogout:        function () {\r\n\t\t\t\treturn $injector.get( '$http' ).delete( Settings.api.measurements( '/token' ) );\r\n\t\t\t},\r\n\t\t\t// Request Interceptor\r\n\t\t\trequest:       function ( config ) {\r\n\t\t\t\tif ( config.url.indexOf( Settings.api.measurements() ) !== -1 ) {\r\n\t\t\t\t\t// All API requests must pass along HTTP credentials\r\n\t\t\t\t\tconfig.withCredentials = true;\r\n\r\n\t\t\t\t\t// If we have a token, add it to the request\r\n\t\t\t\t\tif ( typeof token !== 'undefined' ) {\r\n\t\t\t\t\t\tconfig.headers['Authorization'] = 'Bearer ' + token;\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tconfig.attempts = ( typeof config.attempts === 'number' ) ? config.attempts + 1 : 1;\r\n\t\t\t\t}\r\n\t\t\t\treturn config;\r\n\t\t\t},\r\n\t\t\t// Error Response Interceptor\r\n\t\t\tresponseError: function ( response ) {\r\n\t\t\t\tif ( response.status === 401 && response.config.url.indexOf( Settings.api.measurements() ) !== -1 && response.config.attempts < 2 ) {\r\n\t\t\t\t\tvar deferred = $q.defer();\r\n\t\t\t\t\t$injector.get( '$http' ).get( Settings.api.refresh, {withCredentials: true} ).then( function ( loginResponse ) {\r\n\t\t\t\t\t\tif ( loginResponse.data ) {\r\n\t\t\t\t\t\t\t//get new token\r\n\t\t\t\t\t\t\tstartSession( loginResponse.data.service_ticket ).then( function () {\r\n\t\t\t\t\t\t\t\t//retry request with new token\r\n\t\t\t\t\t\t\t\t$injector.get( '$http' )( response.config ).then( function ( response ) {\r\n\t\t\t\t\t\t\t\t\tdeferred.resolve( response );\r\n\t\t\t\t\t\t\t\t}, function ( response ) {\r\n\t\t\t\t\t\t\t\t\tdeferred.reject();\r\n\t\t\t\t\t\t\t\t} );\r\n\t\t\t\t\t\t\t}, function() {\r\n\t\t\t\t\t\t\t\t$location.path('/error/invalid_session');\r\n\t\t\t\t\t\t\t} );\r\n\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\tdeferred.reject();\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}, function ( response ) {\r\n\t\t\t\t\t\tdeferred.reject();\r\n\t\t\t\t\t\t$location.path('/error/invalid_session');\r\n\t\t\t\t\t} );\r\n\t\t\t\t\treturn deferred.promise;\r\n\t\t\t\t}\r\n\t\t\t\treturn $q.reject( response );\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\tangular.module( 'gma.services.measurements' ).factory( 'Session', Session );\r\n})();\r\n","(function () {\r\n    'use strict';\r\n\r\n    function TargetCity($http, Settings) {\r\n        return {\r\n            createTargetCity: function (data) {\r\n                return $http.post(Settings.api.measurements('/target_cities'), data)\r\n            },\r\n            updateTargetCity: function (data) {\r\n                return $http.put(Settings.api.measurements('/target_cities' + '/' + data.target_city_id), data)\r\n            },\r\n            getTargetCity: function (target_city_id) {\r\n                return $http.get(Settings.api.measurements('/target_cities' + '/' + target_city_id))\r\n            },\r\n            deleteTargetCity: function (target_city_id) {\r\n                return $http.delete(Settings.api.measurements('/target_cities' + '/' + target_city_id))\r\n            },\r\n            searchTargetCities: function (params) {\r\n                return $http.get(Settings.api.measurements('/target_cities'), {params: params})\r\n            }\r\n\r\n        }\r\n    }\r\n\r\n    angular.module('gma.services.measurements').factory('TargetCity', TargetCity);\r\n})();\r\n","(function () {\r\n\t'use strict';\r\n\r\n\tfunction Trainings( $http, Settings ) {\r\n\t\tfunction getHighest( array ) {\r\n\t\t\tvar max = 0;\r\n\t\t\tif ( !array ) return 0;\r\n\t\t\tfor ( var i = 0; i < array.length; i++ ) {\r\n\t\t\t\tif ( array[i].phase > (max || 0) ) {\r\n\t\t\t\t\tmax = array[i].phase;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\treturn max;\r\n\t\t}\r\n\r\n\t\tfunction getHighestCount( array ) {\r\n\t\t\tvar max = 0;\r\n\t\t\tfor ( var i = 0; i < array.length; i++ ) {\r\n\t\t\t\tif ( array[i].number_completed > (max || 0) ) {\r\n\t\t\t\t\tmax = array[i].number_completed;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\treturn max;\r\n\t\t}\r\n\r\n\t\treturn {\r\n\t\t\tgetTrainings:             function ( session_ticket, ministry_id, mcc, show_all, show_tree ) {\r\n\t\t\t\treturn $http\r\n\t\t\t\t\t.get( Settings.api.measurements( '/training' ), {\r\n\t\t\t\t\t\tparams: {\r\n\t\t\t\t\t\t\tministry_id: ministry_id,\r\n\t\t\t\t\t\t\tshow_all:    show_all,\r\n\t\t\t\t\t\t\tshow_tree:   show_tree,\r\n\t\t\t\t\t\t\tmcc:         mcc\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t} )\r\n\t\t\t\t\t.then( function ( response ) {\r\n\r\n\t\t\t\t\t\tangular.forEach( response.data, function ( training ) {\r\n\t\t\t\t\t\t\ttraining.current_stage = getHighest( training.gcm_training_completions ) + 1;\r\n\t\t\t\t\t\t\ttraining.leaders_trained = getHighestCount( training.gcm_training_completions );\r\n\t\t\t\t\t\t\ttraining.editMode = false;\r\n\t\t\t\t\t\t} );\r\n\r\n\t\t\t\t\t\treturn response.data;\r\n\t\t\t\t\t} );\r\n\t\t\t},\r\n\t\t\tupdateTraining:           function ( session_ticket, training ) {\r\n\t\t\t\treturn $http.put( Settings.api.measurements( '/training/' + training.id ), training )\r\n\t\t\t\t\t.then( function ( response ) {\r\n\t\t\t\t\t\treturn response.data;\r\n\t\t\t\t\t} );\r\n\t\t\t},\r\n\t\t\taddTraining:              function ( session_ticket, training ) {\r\n\t\t\t\treturn $http.post( Settings.api.measurements( '/training' ), training )\r\n\t\t\t\t\t.then( function ( response ) {\r\n\t\t\t\t\t\treturn response.data;\r\n\t\t\t\t\t} );\r\n\t\t\t},\r\n\t\t\tdeleteTraining:           function ( session_ticket, training ) {\r\n\t\t\t\treturn $http.delete( Settings.api.measurements( '/training/' + training.id ) )\r\n\t\t\t\t\t.then( function ( response ) {\r\n\t\t\t\t\t\t//checking if response is 204 for successful delete\r\n\t\t\t\t\t\tif(response.status === 204){\r\n\t\t\t\t\t\t\treturn response;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\t// if response is not 204 then throwing error\r\n\t\t\t\t\t\tthrow response;\r\n\t\t\t\t\t} );\r\n\t\t\t},\r\n\t\t\taddTrainingCompletion:    function ( session_ticket, training_completion ) {\r\n\t\t\t\treturn $http.post( Settings.api.measurements( '/training_completion' ), training_completion )\r\n\t\t\t\t\t.then( function ( response ) {\r\n\t\t\t\t\t\treturn response.data;\r\n\t\t\t\t\t} );\r\n\t\t\t},\r\n\t\t\tupdateTrainingCompletion: function ( session_ticket, training_completion ) {\r\n\t\t\t\treturn $http.put( Settings.api.measurements( '/training_completion/' + training_completion.id ), training_completion )\r\n\t\t\t\t\t.then( function ( response ) {\r\n\t\t\t\t\t\treturn response.data;\r\n\t\t\t\t\t} );\r\n\t\t\t},\r\n\t\t\tdeleteTrainingCompletion: function ( session_ticket, training_completion ) {\r\n\t\t\t\treturn $http.delete( Settings.api.measurements( '/training_completion/' + training_completion.id ) )\r\n\t\t\t\t\t.then( function ( response ) {\r\n\t\t\t\t\t\t//checking if response is 204 for successful delete\r\n\t\t\t\t\t\tif(response.status === 204){\r\n\t\t\t\t\t\t\treturn response;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\t// if response is not 204 then throwing response as error\r\n\t\t\t\t\t\tthrow response;\r\n\t\t\t\t\t} );\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\tangular.module( 'gma.services.measurements' ).factory( 'Trainings', Trainings );\r\n})();\r\n","(function () {\r\n    'use strict';\r\n\r\n    function UserPreference($http, Settings) {\r\n\r\n        return {\r\n            getPreference: function () {\r\n                return $http.get(Settings.api.measurements('/user_preferences'))\r\n            },\r\n            savePreference: function (data) {\r\n                return $http.post(Settings.api.measurements('/user_preferences'), data)\r\n            },\r\n            getFlatMinistry: function (assignments) {\r\n                var ministries = [];\r\n                angular.forEach(assignments, flattenMinistry);\r\n\r\n                function flattenMinistry(ministry) {\r\n                    ministries.push(ministry);\r\n                    if (ministry.hasOwnProperty('sub_ministries') && _.size(ministry.sub_ministries) > 0) {\r\n                        angular.forEach(ministry.sub_ministries, flattenMinistry);\r\n                    }\r\n                }\r\n\r\n                //remove duplicates\r\n                return _.uniq( ministries, false, function ( m ) {\r\n                    return m.ministry_id;\r\n                } );\r\n\r\n            },\r\n            getMappedMCCS: function (mccs, mccLabels) {\r\n                var mapped_mccs = [];\r\n                _.each(mccs, function (mcc) {\r\n                    var customObject = {};\r\n                    customObject.mcc = mcc;\r\n                    customObject.mccLabel = mccLabels[mcc];\r\n                    mapped_mccs.push(customObject);\r\n                });\r\n                return mapped_mccs;\r\n            }\r\n\r\n        };\r\n\r\n    }\r\n\r\n    angular.module('gma.services.preference').factory('UserPreference', UserPreference);\r\n})();\r\n","(function () {\r\n\t'use strict';\r\n\r\n\tfunction SettingsService( gettext ) {\r\n\t\tvar config = {},\r\n\t\t\ttabs   = [];\r\n\r\n\t\tthis.setConfig = function ( c ) {\r\n\t\t\tconfig = c;\r\n\t\t};\r\n\r\n\t\tvar versionUrl = function ( path ) {\r\n\t\t\treturn path.indexOf( '?' ) === -1\r\n\t\t\t\t? path + '?ver=' + config.version\r\n\t\t\t\t: path + '&ver=' + config.version;\r\n\t\t};\r\n\r\n\t\tvar appUrl = function ( path, version ) {\r\n\t\t\tversion = typeof version === 'undefined' ? true : version;\r\n\t\t\tvar url = apiUrl( config.appUrl, path );\r\n\t\t\tif ( version ) {\r\n\t\t\t\treturn versionUrl( url );\r\n\t\t\t}\r\n\t\t\treturn url;\r\n\t\t};\r\n\r\n\t\tvar measurementsApi = function ( path ) {\r\n\t\t\treturn apiUrl( config.api.measurements, path );\r\n\t\t};\r\n\r\n\t\tfunction apiUrl( base, path ) {\r\n\t\t\tif ( typeof path === 'undefined' ) return base;\r\n\t\t\treturn ( path.indexOf( '/' ) === 0 )\r\n\t\t\t\t? base + path\r\n\t\t\t\t: base + '/' + path;\r\n\t\t}\r\n\r\n\t\tvar mobileApps = function () {\r\n\t\t\tif ( typeof config.mobileapps === 'undefined' ) return false;\r\n\t\t\treturn config.mobileapps.length > 0 ? config.mobileapps : false;\r\n\t\t};\r\n\r\n\t\tthis.routes = function () {\r\n\t\t\tangular.forEach( config.tabs, function ( tab ) {\r\n\t\t\t\tswitch ( tab ) {\r\n\t\t\t\t\tcase 'map':\r\n\t\t\t\t\t\tthis.push( {\r\n\t\t\t\t\t\t\t/// Main Navigation Tabs - Map\r\n\t\t\t\t\t\t\tname:          gettext( 'Map' ),\r\n\t\t\t\t\t\t\tpath:          '/map',\r\n\t\t\t\t\t\t\ticon:          'glyphicon-map-marker',\r\n\t\t\t\t\t\t\ttemplateUrl:   'partials/map/map.html',\r\n\t\t\t\t\t\t\tcontroller:    'MapCtrl',\r\n\t\t\t\t\t\t\trequiredRoles: ['admin', 'inherited_admin', 'self_assigned', 'member', 'inherited_leader', 'leader']\r\n\t\t\t\t\t\t} );\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase 'measurements':\r\n\t\t\t\t\t\tthis.push( {\r\n\t\t\t\t\t\t\t/// Main Navigation Tabs - Measurements\r\n\t\t\t\t\t\t\tname:          gettext( 'Measurements' ),\r\n\t\t\t\t\t\t\tpath:          '/measurements',\r\n\t\t\t\t\t\t\ticon:          'glyphicon-stats',\r\n\t\t\t\t\t\t\ttemplateUrl:   'partials/measurements/measurements.html',\r\n\t\t\t\t\t\t\tcontroller:    'MeasurementsCtrl',\r\n\t\t\t\t\t\t\trequiredRoles: ['admin', 'inherited_admin', 'self_assigned', 'member', 'inherited_leader', 'leader']\r\n\t\t\t\t\t\t} );\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase 'reports':\r\n\t\t\t\t\t\tthis.push( {\r\n\t\t\t\t\t\t\t/// Main Navigation Tabs - Reports\r\n\t\t\t\t\t\t\tname:          gettext( 'Reports' ),\r\n\t\t\t\t\t\t\tpath:          '/reports',\r\n\t\t\t\t\t\t\ticon:          'glyphicon-list-alt',\r\n\t\t\t\t\t\t\ttemplateUrl:   'partials/reports/reports.html',\r\n\t\t\t\t\t\t\tcontroller:    'ReportsCtrl',\r\n\t\t\t\t\t\t\trequiredRoles: ['admin', 'inherited_admin', 'inherited_leader', 'leader']\r\n\t\t\t\t\t\t} );\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase 'admin':\r\n\t\t\t\t\t\tthis.push( {\r\n\t\t\t\t\t\t\t/// Main Navigation Tabs - Administrate\r\n\t\t\t\t\t\t\tname:          gettext( 'Admin' ),\r\n\t\t\t\t\t\t\tpath:          '/admin',\r\n\t\t\t\t\t\t\ticon:          'glyphicon-cog',\r\n\t\t\t\t\t\t\ttemplateUrl:   'partials/admin/admin.html',\r\n\t\t\t\t\t\t\tcontroller:    'AdminCtrl',\r\n\t\t\t\t\t\t\trequiredRoles: ['admin', 'inherited_admin', 'leader', 'inherited_leader']\r\n\t\t\t\t\t\t} );\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase 'news':\r\n\t\t\t\t\t\tthis.push( {\r\n\t\t\t\t\t\t\t/// Main Navigation Tabs - Home (News/Stories)\r\n\t\t\t\t\t\t\tname:          gettext( 'Home' ),\r\n\t\t\t\t\t\t\tpath:          '/news',\r\n\t\t\t\t\t\t\ticon:          'glyphicon-home',\r\n\t\t\t\t\t\t\ttemplateUrl:   'partials/stories/stories.html',\r\n\t\t\t\t\t\t\tcontroller:    'StoriesCtrl',\r\n\t\t\t\t\t\t\trequiredRoles: ['admin', 'inherited_admin', 'inherited_leader', 'leader', 'member']\r\n\t\t\t\t\t\t} );\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t}, tabs );\r\n\t\t\treturn tabs;\r\n\t\t};\r\n\r\n\t\tthis.$get = function () {\r\n\t\t\treturn {\r\n\t\t\t\tappUrl:                     appUrl,\r\n\t\t\t\tversionUrl:                 versionUrl,\r\n\t\t\t\tversion:                    config.version,\r\n\t\t\t\tname:                       config.name,\r\n\t\t\t\tticket:                     config.ticket,\r\n\t\t\t\tappEnvironment:             config.environment,\r\n\t\t\t\tapi:                        {\r\n\t\t\t\t\tmeasurements: measurementsApi,\r\n\t\t\t\t\trefresh:      config.api.refresh,\r\n\t\t\t\t\tlogout:       config.api.logout,\r\n\t\t\t\t\tlogin:        config.api.login\r\n\t\t\t\t},\r\n\t\t\t\tmobileApps:                 ( typeof config.mobileapps === 'object' && Object.keys( config.mobileapps ).length > 0  ) ? config.mobileapps : false,\r\n\t\t\t\tgmaNamespace:               config.namespace,\r\n\t\t\t\ttabs:                       tabs,\r\n\t\t\t\tgoogleAnalytics:            config.googleanalytics,\r\n\t\t\t\tdefault_measurement_states: config.default_measurement_states || {},\r\n\t\t\t\tstories:                    config.stories,\r\n\t\t\t\tarea_codes:                 config.area_codes,\r\n\t\t\t\tstatic_locales:             config.static_locales\r\n\t\t\t}\r\n\t\t};\r\n\t}\r\n\r\n\tangular.module( 'gma.services.settings' ).provider( 'Settings', SettingsService );\r\n})();\r\n","(function () {\r\n    'use strict';\r\n    /*\r\n     * Contains services for 'stories' ,'news feeds' and 'images'\r\n     */\r\n    function Stories($http, Settings) {\r\n\r\n        return {\r\n            getStory: function (story_id) {\r\n                return $http.get(Settings.api.measurements('/stories') + '/' + story_id)\r\n            },\r\n            searchStories: function (params) {\r\n                return $http.get(Settings.api.measurements('/stories'), {params: params})\r\n            },\r\n            createStory: function (story) {\r\n                return $http.post(Settings.api.measurements('/stories'), story)\r\n            },\r\n            updateStory: function (story) {\r\n                return $http.put(Settings.api.measurements('/stories') + '/' + story.story_id, story)\r\n            },\r\n            /*\r\n            * @source http://stackoverflow.com/questions/13963022/angularjs-how-to-implement-a-simple-file-upload-with-multipart-form\r\n            */\r\n            uploadStoryImage: function (story_id,formData) {\r\n                return $http.post(Settings.api.measurements('/images'+'?story_id='+story_id),\r\n                    formData,\r\n                    {\r\n                        headers: {'Content-Type': undefined},\r\n                        transformRequest: angular.identity\r\n                    }\r\n                )\r\n            },\r\n            getNewsFeeds : function(params){\r\n                return $http.get(Settings.api.measurements('/audit'), {params: params})\r\n            }\r\n        };\r\n\r\n    }\r\n\r\n    angular.module('gma.services.stories').factory('Stories', Stories);\r\n})();\r\n"],"sourceRoot":"/source/"}